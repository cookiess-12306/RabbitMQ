// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mq_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mq_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bitmq {
class openChannelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<openChannelRequest> {
} _openChannelRequest_default_instance_;
class closeChannelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<closeChannelRequest> {
} _closeChannelRequest_default_instance_;
class declareExchangeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<declareExchangeRequest> {
} _declareExchangeRequest_default_instance_;
class deleteExchangeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<deleteExchangeRequest> {
} _deleteExchangeRequest_default_instance_;
class declareQueueRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<declareQueueRequest> {
} _declareQueueRequest_default_instance_;
class deleteQueueRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<deleteQueueRequest> {
} _deleteQueueRequest_default_instance_;
class queueBindRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<queueBindRequest> {
} _queueBindRequest_default_instance_;
class queueUnBindRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<queueUnBindRequest> {
} _queueUnBindRequest_default_instance_;
class basicPublishRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<basicPublishRequest> {
} _basicPublishRequest_default_instance_;
class basicAckRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<basicAckRequest> {
} _basicAckRequest_default_instance_;
class basicConsumeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<basicConsumeRequest> {
} _basicConsumeRequest_default_instance_;
class basicCancelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<basicCancelRequest> {
} _basicCancelRequest_default_instance_;
class basicConsumeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<basicConsumeResponse> {
} _basicConsumeResponse_default_instance_;
class basicCommonResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<basicCommonResponse> {
} _basicCommonResponse_default_instance_;

namespace protobuf_mq_5fproto_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[16];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openChannelRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openChannelRequest, cid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closeChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closeChannelRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closeChannelRequest, cid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareExchangeRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareExchangeRequest, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareExchangeRequest, exchange_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareExchangeRequest, exchange_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareExchangeRequest, durable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareExchangeRequest, auto_delete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareExchangeRequest, args_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteExchangeRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteExchangeRequest, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteExchangeRequest, exchange_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareQueueRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareQueueRequest, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareQueueRequest, queue_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareQueueRequest, exclusive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareQueueRequest, durable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareQueueRequest, auto_delete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(declareQueueRequest, args_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteQueueRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteQueueRequest, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteQueueRequest, queue_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queueBindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queueBindRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queueBindRequest, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queueBindRequest, exchange_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queueBindRequest, queue_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queueBindRequest, binding_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queueUnBindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queueUnBindRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queueUnBindRequest, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queueUnBindRequest, exchange_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queueUnBindRequest, queue_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicPublishRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicPublishRequest, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicPublishRequest, exchange_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicPublishRequest, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicPublishRequest, properties_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicAckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicAckRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicAckRequest, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicAckRequest, queue_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicAckRequest, message_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicConsumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicConsumeRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicConsumeRequest, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicConsumeRequest, consumer_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicConsumeRequest, queue_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicConsumeRequest, auto_ack_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicCancelRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicCancelRequest, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicCancelRequest, consumer_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicCancelRequest, queue_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicConsumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicConsumeResponse, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicConsumeResponse, consumer_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicConsumeResponse, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicConsumeResponse, properties_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicCommonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicCommonResponse, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicCommonResponse, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basicCommonResponse, ok_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(openChannelRequest)},
  { 6, -1, sizeof(closeChannelRequest)},
  { 12, -1, sizeof(declareExchangeRequest)},
  { 23, -1, sizeof(deleteExchangeRequest)},
  { 30, -1, sizeof(declareQueueRequest)},
  { 41, -1, sizeof(deleteQueueRequest)},
  { 48, -1, sizeof(queueBindRequest)},
  { 57, -1, sizeof(queueUnBindRequest)},
  { 65, -1, sizeof(basicPublishRequest)},
  { 74, -1, sizeof(basicAckRequest)},
  { 82, -1, sizeof(basicConsumeRequest)},
  { 91, -1, sizeof(basicCancelRequest)},
  { 99, -1, sizeof(basicConsumeResponse)},
  { 107, -1, sizeof(basicCommonResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_openChannelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_closeChannelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_declareExchangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_deleteExchangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_declareQueueRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_deleteQueueRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_queueBindRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_queueUnBindRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_basicPublishRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_basicAckRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_basicConsumeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_basicCancelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_basicConsumeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_basicCommonResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mq_proto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
  const ::google::protobuf::Descriptor* declareExchangeRequest_ArgsEntry_descriptor = protobuf_mq_5fproto_2eproto::file_level_metadata[2].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        declareExchangeRequest_ArgsEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                declareExchangeRequest_ArgsEntry_descriptor));
  const ::google::protobuf::Descriptor* declareQueueRequest_ArgsEntry_descriptor = protobuf_mq_5fproto_2eproto::file_level_metadata[5].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        declareQueueRequest_ArgsEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                declareQueueRequest_ArgsEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _openChannelRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _closeChannelRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _declareExchangeRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _deleteExchangeRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _declareQueueRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _deleteQueueRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _queueBindRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _queueUnBindRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _basicPublishRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _basicAckRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _basicConsumeRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _basicCancelRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _basicConsumeResponse_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _basicCommonResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::bitmq::protobuf_mq_5fmsg_2eproto::InitDefaults();
  _openChannelRequest_default_instance_.DefaultConstruct();
  _closeChannelRequest_default_instance_.DefaultConstruct();
  _declareExchangeRequest_default_instance_.DefaultConstruct();
  _deleteExchangeRequest_default_instance_.DefaultConstruct();
  _declareQueueRequest_default_instance_.DefaultConstruct();
  _deleteQueueRequest_default_instance_.DefaultConstruct();
  _queueBindRequest_default_instance_.DefaultConstruct();
  _queueUnBindRequest_default_instance_.DefaultConstruct();
  _basicPublishRequest_default_instance_.DefaultConstruct();
  _basicAckRequest_default_instance_.DefaultConstruct();
  _basicConsumeRequest_default_instance_.DefaultConstruct();
  _basicCancelRequest_default_instance_.DefaultConstruct();
  _basicConsumeResponse_default_instance_.DefaultConstruct();
  _basicCommonResponse_default_instance_.DefaultConstruct();
  _basicPublishRequest_default_instance_.get_mutable()->properties_ = const_cast< ::bitmq::BasicProperties*>(
      ::bitmq::BasicProperties::internal_default_instance());
  _basicConsumeResponse_default_instance_.get_mutable()->properties_ = const_cast< ::bitmq::BasicProperties*>(
      ::bitmq::BasicProperties::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016mq_proto.proto\022\005bitmq\032\014mq_msg.proto\".\n"
      "\022openChannelRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030"
      "\002 \001(\t\"/\n\023closeChannelRequest\022\013\n\003rid\030\001 \001("
      "\t\022\013\n\003cid\030\002 \001(\t\"\377\001\n\026declareExchangeReques"
      "t\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\025\n\rexchange_"
      "name\030\003 \001(\t\022*\n\rexchange_type\030\004 \001(\0162\023.bitm"
      "q.ExchangeType\022\017\n\007durable\030\005 \001(\010\022\023\n\013auto_"
      "delete\030\006 \001(\010\0225\n\004args\030\007 \003(\0132\'.bitmq.decla"
      "reExchangeRequest.ArgsEntry\032+\n\tArgsEntry"
      "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"H\n\025dele"
      "teExchangeRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002 "
      "\001(\t\022\025\n\rexchange_name\030\003 \001(\t\"\335\001\n\023declareQu"
      "eueRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\022\n\n"
      "queue_name\030\003 \001(\t\022\021\n\texclusive\030\004 \001(\010\022\017\n\007d"
      "urable\030\005 \001(\010\022\023\n\013auto_delete\030\006 \001(\010\0222\n\004arg"
      "s\030\007 \003(\0132$.bitmq.declareQueueRequest.Args"
      "Entry\032+\n\tArgsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
      "\030\002 \001(\t:\0028\001\"B\n\022deleteQueueRequest\022\013\n\003rid\030"
      "\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\022\n\nqueue_name\030\003 \001(\t\"l"
      "\n\020queueBindRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002"
      " \001(\t\022\025\n\rexchange_name\030\003 \001(\t\022\022\n\nqueue_nam"
      "e\030\004 \001(\t\022\023\n\013binding_key\030\005 \001(\t\"Y\n\022queueUnB"
      "indRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\025\n\r"
      "exchange_name\030\003 \001(\t\022\022\n\nqueue_name\030\004 \001(\t\""
      "\200\001\n\023basicPublishRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003"
      "cid\030\002 \001(\t\022\025\n\rexchange_name\030\003 \001(\t\022\014\n\004body"
      "\030\004 \001(\t\022*\n\nproperties\030\005 \001(\0132\026.bitmq.Basic"
      "Properties\"S\n\017basicAckRequest\022\013\n\003rid\030\001 \001"
      "(\t\022\013\n\003cid\030\002 \001(\t\022\022\n\nqueue_name\030\003 \001(\t\022\022\n\nm"
      "essage_id\030\004 \001(\t\"k\n\023basicConsumeRequest\022\013"
      "\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\024\n\014consumer_tag"
      "\030\003 \001(\t\022\022\n\nqueue_name\030\004 \001(\t\022\020\n\010auto_ack\030\005"
      " \001(\010\"X\n\022basicCancelRequest\022\013\n\003rid\030\001 \001(\t\022"
      "\013\n\003cid\030\002 \001(\t\022\024\n\014consumer_tag\030\003 \001(\t\022\022\n\nqu"
      "eue_name\030\004 \001(\t\"s\n\024basicConsumeResponse\022\013"
      "\n\003cid\030\001 \001(\t\022\024\n\014consumer_tag\030\002 \001(\t\022\014\n\004bod"
      "y\030\003 \001(\t\022*\n\nproperties\030\004 \001(\0132\026.bitmq.Basi"
      "cProperties\";\n\023basicCommonResponse\022\013\n\003ri"
      "d\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\n\n\002ok\030\003 \001(\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mq_proto.proto", &protobuf_RegisterTypes);
  ::bitmq::protobuf_mq_5fmsg_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mq_5fproto_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int openChannelRequest::kRidFieldNumber;
const int openChannelRequest::kCidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

openChannelRequest::openChannelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.openChannelRequest)
}
openChannelRequest::openChannelRequest(const openChannelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.openChannelRequest)
}

void openChannelRequest::SharedCtor() {
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

openChannelRequest::~openChannelRequest() {
  // @@protoc_insertion_point(destructor:bitmq.openChannelRequest)
  SharedDtor();
}

void openChannelRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void openChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* openChannelRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[0].descriptor;
}

const openChannelRequest& openChannelRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

openChannelRequest* openChannelRequest::New(::google::protobuf::Arena* arena) const {
  openChannelRequest* n = new openChannelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void openChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.openChannelRequest)
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool openChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.openChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.openChannelRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.openChannelRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.openChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.openChannelRequest)
  return false;
#undef DO_
}

void openChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.openChannelRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.openChannelRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.openChannelRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.openChannelRequest)
}

::google::protobuf::uint8* openChannelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.openChannelRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.openChannelRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.openChannelRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.openChannelRequest)
  return target;
}

size_t openChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.openChannelRequest)
  size_t total_size = 0;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void openChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.openChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const openChannelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const openChannelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.openChannelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.openChannelRequest)
    MergeFrom(*source);
  }
}

void openChannelRequest::MergeFrom(const openChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.openChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
}

void openChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.openChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void openChannelRequest::CopyFrom(const openChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.openChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool openChannelRequest::IsInitialized() const {
  return true;
}

void openChannelRequest::Swap(openChannelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void openChannelRequest::InternalSwap(openChannelRequest* other) {
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata openChannelRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// openChannelRequest

// string rid = 1;
void openChannelRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& openChannelRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.openChannelRequest.rid)
  return rid_.GetNoArena();
}
void openChannelRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.openChannelRequest.rid)
}
#if LANG_CXX11
void openChannelRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.openChannelRequest.rid)
}
#endif
void openChannelRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.openChannelRequest.rid)
}
void openChannelRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.openChannelRequest.rid)
}
::std::string* openChannelRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.openChannelRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* openChannelRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.openChannelRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void openChannelRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.openChannelRequest.rid)
}

// string cid = 2;
void openChannelRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& openChannelRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.openChannelRequest.cid)
  return cid_.GetNoArena();
}
void openChannelRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.openChannelRequest.cid)
}
#if LANG_CXX11
void openChannelRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.openChannelRequest.cid)
}
#endif
void openChannelRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.openChannelRequest.cid)
}
void openChannelRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.openChannelRequest.cid)
}
::std::string* openChannelRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.openChannelRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* openChannelRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.openChannelRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void openChannelRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.openChannelRequest.cid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int closeChannelRequest::kRidFieldNumber;
const int closeChannelRequest::kCidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

closeChannelRequest::closeChannelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.closeChannelRequest)
}
closeChannelRequest::closeChannelRequest(const closeChannelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.closeChannelRequest)
}

void closeChannelRequest::SharedCtor() {
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

closeChannelRequest::~closeChannelRequest() {
  // @@protoc_insertion_point(destructor:bitmq.closeChannelRequest)
  SharedDtor();
}

void closeChannelRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void closeChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* closeChannelRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[1].descriptor;
}

const closeChannelRequest& closeChannelRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

closeChannelRequest* closeChannelRequest::New(::google::protobuf::Arena* arena) const {
  closeChannelRequest* n = new closeChannelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void closeChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.closeChannelRequest)
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool closeChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.closeChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.closeChannelRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.closeChannelRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.closeChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.closeChannelRequest)
  return false;
#undef DO_
}

void closeChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.closeChannelRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.closeChannelRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.closeChannelRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.closeChannelRequest)
}

::google::protobuf::uint8* closeChannelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.closeChannelRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.closeChannelRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.closeChannelRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.closeChannelRequest)
  return target;
}

size_t closeChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.closeChannelRequest)
  size_t total_size = 0;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void closeChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.closeChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const closeChannelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const closeChannelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.closeChannelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.closeChannelRequest)
    MergeFrom(*source);
  }
}

void closeChannelRequest::MergeFrom(const closeChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.closeChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
}

void closeChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.closeChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void closeChannelRequest::CopyFrom(const closeChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.closeChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool closeChannelRequest::IsInitialized() const {
  return true;
}

void closeChannelRequest::Swap(closeChannelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void closeChannelRequest::InternalSwap(closeChannelRequest* other) {
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata closeChannelRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// closeChannelRequest

// string rid = 1;
void closeChannelRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& closeChannelRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.closeChannelRequest.rid)
  return rid_.GetNoArena();
}
void closeChannelRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.closeChannelRequest.rid)
}
#if LANG_CXX11
void closeChannelRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.closeChannelRequest.rid)
}
#endif
void closeChannelRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.closeChannelRequest.rid)
}
void closeChannelRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.closeChannelRequest.rid)
}
::std::string* closeChannelRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.closeChannelRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* closeChannelRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.closeChannelRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void closeChannelRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.closeChannelRequest.rid)
}

// string cid = 2;
void closeChannelRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& closeChannelRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.closeChannelRequest.cid)
  return cid_.GetNoArena();
}
void closeChannelRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.closeChannelRequest.cid)
}
#if LANG_CXX11
void closeChannelRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.closeChannelRequest.cid)
}
#endif
void closeChannelRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.closeChannelRequest.cid)
}
void closeChannelRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.closeChannelRequest.cid)
}
::std::string* closeChannelRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.closeChannelRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* closeChannelRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.closeChannelRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void closeChannelRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.closeChannelRequest.cid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int declareExchangeRequest::kRidFieldNumber;
const int declareExchangeRequest::kCidFieldNumber;
const int declareExchangeRequest::kExchangeNameFieldNumber;
const int declareExchangeRequest::kExchangeTypeFieldNumber;
const int declareExchangeRequest::kDurableFieldNumber;
const int declareExchangeRequest::kAutoDeleteFieldNumber;
const int declareExchangeRequest::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

declareExchangeRequest::declareExchangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.declareExchangeRequest)
}
declareExchangeRequest::declareExchangeRequest(const declareExchangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& declareExchangeRequest_ArgsEntry_descriptor = protobuf_mq_5fproto_2eproto::file_level_metadata[2].descriptor;
  args_.SetAssignDescriptorCallback(
      protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce);
  args_.SetEntryDescriptor(
      &declareExchangeRequest_ArgsEntry_descriptor);
  args_.MergeFrom(from.args_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  exchange_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_name().size() > 0) {
    exchange_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_name_);
  }
  ::memcpy(&exchange_type_, &from.exchange_type_,
    reinterpret_cast<char*>(&auto_delete_) -
    reinterpret_cast<char*>(&exchange_type_) + sizeof(auto_delete_));
  // @@protoc_insertion_point(copy_constructor:bitmq.declareExchangeRequest)
}

void declareExchangeRequest::SharedCtor() {
  const ::google::protobuf::Descriptor*& declareExchangeRequest_ArgsEntry_descriptor = protobuf_mq_5fproto_2eproto::file_level_metadata[2].descriptor;
  args_.SetAssignDescriptorCallback(
      protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce);
  args_.SetEntryDescriptor(
      &declareExchangeRequest_ArgsEntry_descriptor);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&exchange_type_, 0, reinterpret_cast<char*>(&auto_delete_) -
    reinterpret_cast<char*>(&exchange_type_) + sizeof(auto_delete_));
  _cached_size_ = 0;
}

declareExchangeRequest::~declareExchangeRequest() {
  // @@protoc_insertion_point(destructor:bitmq.declareExchangeRequest)
  SharedDtor();
}

void declareExchangeRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void declareExchangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* declareExchangeRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[3].descriptor;
}

const declareExchangeRequest& declareExchangeRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

declareExchangeRequest* declareExchangeRequest::New(::google::protobuf::Arena* arena) const {
  declareExchangeRequest* n = new declareExchangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void declareExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.declareExchangeRequest)
  args_.Clear();
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&exchange_type_, 0, reinterpret_cast<char*>(&auto_delete_) -
    reinterpret_cast<char*>(&exchange_type_) + sizeof(auto_delete_));
}

bool declareExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.declareExchangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.declareExchangeRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.declareExchangeRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_name().data(), this->exchange_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.declareExchangeRequest.exchange_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bitmq.ExchangeType exchange_type = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_exchange_type(static_cast< ::bitmq::ExchangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool durable = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &durable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool auto_delete = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> args = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          declareExchangeRequest_ArgsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&args_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.declareExchangeRequest.ArgsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.declareExchangeRequest.ArgsEntry.value"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.declareExchangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.declareExchangeRequest)
  return false;
#undef DO_
}

void declareExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.declareExchangeRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareExchangeRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareExchangeRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareExchangeRequest.exchange_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange_name(), output);
  }

  // .bitmq.ExchangeType exchange_type = 4;
  if (this->exchange_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->exchange_type(), output);
  }

  // bool durable = 5;
  if (this->durable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->durable(), output);
  }

  // bool auto_delete = 6;
  if (this->auto_delete() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->auto_delete(), output);
  }

  // map<string, string> args = 7;
  if (!this->args().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "bitmq.declareExchangeRequest.ArgsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "bitmq.declareExchangeRequest.ArgsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->args().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->args().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<declareExchangeRequest_ArgsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(args_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<declareExchangeRequest_ArgsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it) {
        entry.reset(args_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:bitmq.declareExchangeRequest)
}

::google::protobuf::uint8* declareExchangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.declareExchangeRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareExchangeRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareExchangeRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareExchangeRequest.exchange_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange_name(), target);
  }

  // .bitmq.ExchangeType exchange_type = 4;
  if (this->exchange_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->exchange_type(), target);
  }

  // bool durable = 5;
  if (this->durable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->durable(), target);
  }

  // bool auto_delete = 6;
  if (this->auto_delete() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->auto_delete(), target);
  }

  // map<string, string> args = 7;
  if (!this->args().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "bitmq.declareExchangeRequest.ArgsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "bitmq.declareExchangeRequest.ArgsEntry.value");
      }
    };

    if (deterministic &&
        this->args().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->args().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<declareExchangeRequest_ArgsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(args_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<declareExchangeRequest_ArgsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it) {
        entry.reset(args_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.declareExchangeRequest)
  return target;
}

size_t declareExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.declareExchangeRequest)
  size_t total_size = 0;

  // map<string, string> args = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  {
    ::google::protobuf::scoped_ptr<declareExchangeRequest_ArgsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->args().begin();
        it != this->args().end(); ++it) {
      entry.reset(args_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_name());
  }

  // .bitmq.ExchangeType exchange_type = 4;
  if (this->exchange_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange_type());
  }

  // bool durable = 5;
  if (this->durable() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_delete = 6;
  if (this->auto_delete() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void declareExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.declareExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const declareExchangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const declareExchangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.declareExchangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.declareExchangeRequest)
    MergeFrom(*source);
  }
}

void declareExchangeRequest::MergeFrom(const declareExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.declareExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  args_.MergeFrom(from.args_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.exchange_name().size() > 0) {

    exchange_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_name_);
  }
  if (from.exchange_type() != 0) {
    set_exchange_type(from.exchange_type());
  }
  if (from.durable() != 0) {
    set_durable(from.durable());
  }
  if (from.auto_delete() != 0) {
    set_auto_delete(from.auto_delete());
  }
}

void declareExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.declareExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void declareExchangeRequest::CopyFrom(const declareExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.declareExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool declareExchangeRequest::IsInitialized() const {
  return true;
}

void declareExchangeRequest::Swap(declareExchangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void declareExchangeRequest::InternalSwap(declareExchangeRequest* other) {
  args_.Swap(&other->args_);
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  exchange_name_.Swap(&other->exchange_name_);
  std::swap(exchange_type_, other->exchange_type_);
  std::swap(durable_, other->durable_);
  std::swap(auto_delete_, other->auto_delete_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata declareExchangeRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// declareExchangeRequest

// string rid = 1;
void declareExchangeRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& declareExchangeRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.rid)
  return rid_.GetNoArena();
}
void declareExchangeRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.rid)
}
#if LANG_CXX11
void declareExchangeRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareExchangeRequest.rid)
}
#endif
void declareExchangeRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareExchangeRequest.rid)
}
void declareExchangeRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareExchangeRequest.rid)
}
::std::string* declareExchangeRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareExchangeRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* declareExchangeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.declareExchangeRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void declareExchangeRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareExchangeRequest.rid)
}

// string cid = 2;
void declareExchangeRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& declareExchangeRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.cid)
  return cid_.GetNoArena();
}
void declareExchangeRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.cid)
}
#if LANG_CXX11
void declareExchangeRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareExchangeRequest.cid)
}
#endif
void declareExchangeRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareExchangeRequest.cid)
}
void declareExchangeRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareExchangeRequest.cid)
}
::std::string* declareExchangeRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareExchangeRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* declareExchangeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.declareExchangeRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void declareExchangeRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareExchangeRequest.cid)
}

// string exchange_name = 3;
void declareExchangeRequest::clear_exchange_name() {
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& declareExchangeRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.exchange_name)
  return exchange_name_.GetNoArena();
}
void declareExchangeRequest::set_exchange_name(const ::std::string& value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.exchange_name)
}
#if LANG_CXX11
void declareExchangeRequest::set_exchange_name(::std::string&& value) {
  
  exchange_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareExchangeRequest.exchange_name)
}
#endif
void declareExchangeRequest::set_exchange_name(const char* value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareExchangeRequest.exchange_name)
}
void declareExchangeRequest::set_exchange_name(const char* value, size_t size) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareExchangeRequest.exchange_name)
}
::std::string* declareExchangeRequest::mutable_exchange_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareExchangeRequest.exchange_name)
  return exchange_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* declareExchangeRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:bitmq.declareExchangeRequest.exchange_name)
  
  return exchange_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void declareExchangeRequest::set_allocated_exchange_name(::std::string* exchange_name) {
  if (exchange_name != NULL) {
    
  } else {
    
  }
  exchange_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareExchangeRequest.exchange_name)
}

// .bitmq.ExchangeType exchange_type = 4;
void declareExchangeRequest::clear_exchange_type() {
  exchange_type_ = 0;
}
::bitmq::ExchangeType declareExchangeRequest::exchange_type() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.exchange_type)
  return static_cast< ::bitmq::ExchangeType >(exchange_type_);
}
void declareExchangeRequest::set_exchange_type(::bitmq::ExchangeType value) {
  
  exchange_type_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.exchange_type)
}

// bool durable = 5;
void declareExchangeRequest::clear_durable() {
  durable_ = false;
}
bool declareExchangeRequest::durable() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.durable)
  return durable_;
}
void declareExchangeRequest::set_durable(bool value) {
  
  durable_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.durable)
}

// bool auto_delete = 6;
void declareExchangeRequest::clear_auto_delete() {
  auto_delete_ = false;
}
bool declareExchangeRequest::auto_delete() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.auto_delete)
  return auto_delete_;
}
void declareExchangeRequest::set_auto_delete(bool value) {
  
  auto_delete_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.auto_delete)
}

// map<string, string> args = 7;
int declareExchangeRequest::args_size() const {
  return args_.size();
}
void declareExchangeRequest::clear_args() {
  args_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
declareExchangeRequest::args() const {
  // @@protoc_insertion_point(field_map:bitmq.declareExchangeRequest.args)
  return args_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
declareExchangeRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:bitmq.declareExchangeRequest.args)
  return args_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int deleteExchangeRequest::kRidFieldNumber;
const int deleteExchangeRequest::kCidFieldNumber;
const int deleteExchangeRequest::kExchangeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

deleteExchangeRequest::deleteExchangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.deleteExchangeRequest)
}
deleteExchangeRequest::deleteExchangeRequest(const deleteExchangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  exchange_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_name().size() > 0) {
    exchange_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_name_);
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.deleteExchangeRequest)
}

void deleteExchangeRequest::SharedCtor() {
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

deleteExchangeRequest::~deleteExchangeRequest() {
  // @@protoc_insertion_point(destructor:bitmq.deleteExchangeRequest)
  SharedDtor();
}

void deleteExchangeRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void deleteExchangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* deleteExchangeRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[4].descriptor;
}

const deleteExchangeRequest& deleteExchangeRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

deleteExchangeRequest* deleteExchangeRequest::New(::google::protobuf::Arena* arena) const {
  deleteExchangeRequest* n = new deleteExchangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void deleteExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.deleteExchangeRequest)
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool deleteExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.deleteExchangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.deleteExchangeRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.deleteExchangeRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_name().data(), this->exchange_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.deleteExchangeRequest.exchange_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.deleteExchangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.deleteExchangeRequest)
  return false;
#undef DO_
}

void deleteExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.deleteExchangeRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteExchangeRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteExchangeRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteExchangeRequest.exchange_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.deleteExchangeRequest)
}

::google::protobuf::uint8* deleteExchangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.deleteExchangeRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteExchangeRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteExchangeRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteExchangeRequest.exchange_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.deleteExchangeRequest)
  return target;
}

size_t deleteExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.deleteExchangeRequest)
  size_t total_size = 0;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void deleteExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.deleteExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const deleteExchangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const deleteExchangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.deleteExchangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.deleteExchangeRequest)
    MergeFrom(*source);
  }
}

void deleteExchangeRequest::MergeFrom(const deleteExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.deleteExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.exchange_name().size() > 0) {

    exchange_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_name_);
  }
}

void deleteExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.deleteExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deleteExchangeRequest::CopyFrom(const deleteExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.deleteExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteExchangeRequest::IsInitialized() const {
  return true;
}

void deleteExchangeRequest::Swap(deleteExchangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void deleteExchangeRequest::InternalSwap(deleteExchangeRequest* other) {
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  exchange_name_.Swap(&other->exchange_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata deleteExchangeRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// deleteExchangeRequest

// string rid = 1;
void deleteExchangeRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& deleteExchangeRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteExchangeRequest.rid)
  return rid_.GetNoArena();
}
void deleteExchangeRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteExchangeRequest.rid)
}
#if LANG_CXX11
void deleteExchangeRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteExchangeRequest.rid)
}
#endif
void deleteExchangeRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteExchangeRequest.rid)
}
void deleteExchangeRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteExchangeRequest.rid)
}
::std::string* deleteExchangeRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteExchangeRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* deleteExchangeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.deleteExchangeRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void deleteExchangeRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteExchangeRequest.rid)
}

// string cid = 2;
void deleteExchangeRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& deleteExchangeRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteExchangeRequest.cid)
  return cid_.GetNoArena();
}
void deleteExchangeRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteExchangeRequest.cid)
}
#if LANG_CXX11
void deleteExchangeRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteExchangeRequest.cid)
}
#endif
void deleteExchangeRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteExchangeRequest.cid)
}
void deleteExchangeRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteExchangeRequest.cid)
}
::std::string* deleteExchangeRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteExchangeRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* deleteExchangeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.deleteExchangeRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void deleteExchangeRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteExchangeRequest.cid)
}

// string exchange_name = 3;
void deleteExchangeRequest::clear_exchange_name() {
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& deleteExchangeRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteExchangeRequest.exchange_name)
  return exchange_name_.GetNoArena();
}
void deleteExchangeRequest::set_exchange_name(const ::std::string& value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteExchangeRequest.exchange_name)
}
#if LANG_CXX11
void deleteExchangeRequest::set_exchange_name(::std::string&& value) {
  
  exchange_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteExchangeRequest.exchange_name)
}
#endif
void deleteExchangeRequest::set_exchange_name(const char* value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteExchangeRequest.exchange_name)
}
void deleteExchangeRequest::set_exchange_name(const char* value, size_t size) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteExchangeRequest.exchange_name)
}
::std::string* deleteExchangeRequest::mutable_exchange_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteExchangeRequest.exchange_name)
  return exchange_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* deleteExchangeRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:bitmq.deleteExchangeRequest.exchange_name)
  
  return exchange_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void deleteExchangeRequest::set_allocated_exchange_name(::std::string* exchange_name) {
  if (exchange_name != NULL) {
    
  } else {
    
  }
  exchange_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteExchangeRequest.exchange_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int declareQueueRequest::kRidFieldNumber;
const int declareQueueRequest::kCidFieldNumber;
const int declareQueueRequest::kQueueNameFieldNumber;
const int declareQueueRequest::kExclusiveFieldNumber;
const int declareQueueRequest::kDurableFieldNumber;
const int declareQueueRequest::kAutoDeleteFieldNumber;
const int declareQueueRequest::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

declareQueueRequest::declareQueueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.declareQueueRequest)
}
declareQueueRequest::declareQueueRequest(const declareQueueRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& declareQueueRequest_ArgsEntry_descriptor = protobuf_mq_5fproto_2eproto::file_level_metadata[5].descriptor;
  args_.SetAssignDescriptorCallback(
      protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce);
  args_.SetEntryDescriptor(
      &declareQueueRequest_ArgsEntry_descriptor);
  args_.MergeFrom(from.args_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_name().size() > 0) {
    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  ::memcpy(&exclusive_, &from.exclusive_,
    reinterpret_cast<char*>(&auto_delete_) -
    reinterpret_cast<char*>(&exclusive_) + sizeof(auto_delete_));
  // @@protoc_insertion_point(copy_constructor:bitmq.declareQueueRequest)
}

void declareQueueRequest::SharedCtor() {
  const ::google::protobuf::Descriptor*& declareQueueRequest_ArgsEntry_descriptor = protobuf_mq_5fproto_2eproto::file_level_metadata[5].descriptor;
  args_.SetAssignDescriptorCallback(
      protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce);
  args_.SetEntryDescriptor(
      &declareQueueRequest_ArgsEntry_descriptor);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&exclusive_, 0, reinterpret_cast<char*>(&auto_delete_) -
    reinterpret_cast<char*>(&exclusive_) + sizeof(auto_delete_));
  _cached_size_ = 0;
}

declareQueueRequest::~declareQueueRequest() {
  // @@protoc_insertion_point(destructor:bitmq.declareQueueRequest)
  SharedDtor();
}

void declareQueueRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void declareQueueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* declareQueueRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[6].descriptor;
}

const declareQueueRequest& declareQueueRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

declareQueueRequest* declareQueueRequest::New(::google::protobuf::Arena* arena) const {
  declareQueueRequest* n = new declareQueueRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void declareQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.declareQueueRequest)
  args_.Clear();
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&exclusive_, 0, reinterpret_cast<char*>(&auto_delete_) -
    reinterpret_cast<char*>(&exclusive_) + sizeof(auto_delete_));
}

bool declareQueueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.declareQueueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.declareQueueRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.declareQueueRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string queue_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_name().data(), this->queue_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.declareQueueRequest.queue_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool exclusive = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclusive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool durable = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &durable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool auto_delete = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> args = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          declareQueueRequest_ArgsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&args_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.declareQueueRequest.ArgsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.declareQueueRequest.ArgsEntry.value"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.declareQueueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.declareQueueRequest)
  return false;
#undef DO_
}

void declareQueueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.declareQueueRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareQueueRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareQueueRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // string queue_name = 3;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareQueueRequest.queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->queue_name(), output);
  }

  // bool exclusive = 4;
  if (this->exclusive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->exclusive(), output);
  }

  // bool durable = 5;
  if (this->durable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->durable(), output);
  }

  // bool auto_delete = 6;
  if (this->auto_delete() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->auto_delete(), output);
  }

  // map<string, string> args = 7;
  if (!this->args().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "bitmq.declareQueueRequest.ArgsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "bitmq.declareQueueRequest.ArgsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->args().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->args().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<declareQueueRequest_ArgsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(args_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<declareQueueRequest_ArgsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it) {
        entry.reset(args_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:bitmq.declareQueueRequest)
}

::google::protobuf::uint8* declareQueueRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.declareQueueRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareQueueRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareQueueRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // string queue_name = 3;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareQueueRequest.queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->queue_name(), target);
  }

  // bool exclusive = 4;
  if (this->exclusive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->exclusive(), target);
  }

  // bool durable = 5;
  if (this->durable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->durable(), target);
  }

  // bool auto_delete = 6;
  if (this->auto_delete() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->auto_delete(), target);
  }

  // map<string, string> args = 7;
  if (!this->args().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "bitmq.declareQueueRequest.ArgsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "bitmq.declareQueueRequest.ArgsEntry.value");
      }
    };

    if (deterministic &&
        this->args().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->args().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<declareQueueRequest_ArgsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(args_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<declareQueueRequest_ArgsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it) {
        entry.reset(args_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.declareQueueRequest)
  return target;
}

size_t declareQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.declareQueueRequest)
  size_t total_size = 0;

  // map<string, string> args = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  {
    ::google::protobuf::scoped_ptr<declareQueueRequest_ArgsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->args().begin();
        it != this->args().end(); ++it) {
      entry.reset(args_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // string queue_name = 3;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_name());
  }

  // bool exclusive = 4;
  if (this->exclusive() != 0) {
    total_size += 1 + 1;
  }

  // bool durable = 5;
  if (this->durable() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_delete = 6;
  if (this->auto_delete() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void declareQueueRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.declareQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const declareQueueRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const declareQueueRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.declareQueueRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.declareQueueRequest)
    MergeFrom(*source);
  }
}

void declareQueueRequest::MergeFrom(const declareQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.declareQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  args_.MergeFrom(from.args_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.exclusive() != 0) {
    set_exclusive(from.exclusive());
  }
  if (from.durable() != 0) {
    set_durable(from.durable());
  }
  if (from.auto_delete() != 0) {
    set_auto_delete(from.auto_delete());
  }
}

void declareQueueRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.declareQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void declareQueueRequest::CopyFrom(const declareQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.declareQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool declareQueueRequest::IsInitialized() const {
  return true;
}

void declareQueueRequest::Swap(declareQueueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void declareQueueRequest::InternalSwap(declareQueueRequest* other) {
  args_.Swap(&other->args_);
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  queue_name_.Swap(&other->queue_name_);
  std::swap(exclusive_, other->exclusive_);
  std::swap(durable_, other->durable_);
  std::swap(auto_delete_, other->auto_delete_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata declareQueueRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// declareQueueRequest

// string rid = 1;
void declareQueueRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& declareQueueRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.rid)
  return rid_.GetNoArena();
}
void declareQueueRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.rid)
}
#if LANG_CXX11
void declareQueueRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareQueueRequest.rid)
}
#endif
void declareQueueRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareQueueRequest.rid)
}
void declareQueueRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareQueueRequest.rid)
}
::std::string* declareQueueRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareQueueRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* declareQueueRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.declareQueueRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void declareQueueRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareQueueRequest.rid)
}

// string cid = 2;
void declareQueueRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& declareQueueRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.cid)
  return cid_.GetNoArena();
}
void declareQueueRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.cid)
}
#if LANG_CXX11
void declareQueueRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareQueueRequest.cid)
}
#endif
void declareQueueRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareQueueRequest.cid)
}
void declareQueueRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareQueueRequest.cid)
}
::std::string* declareQueueRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareQueueRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* declareQueueRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.declareQueueRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void declareQueueRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareQueueRequest.cid)
}

// string queue_name = 3;
void declareQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& declareQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.queue_name)
  return queue_name_.GetNoArena();
}
void declareQueueRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.queue_name)
}
#if LANG_CXX11
void declareQueueRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareQueueRequest.queue_name)
}
#endif
void declareQueueRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareQueueRequest.queue_name)
}
void declareQueueRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareQueueRequest.queue_name)
}
::std::string* declareQueueRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareQueueRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* declareQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.declareQueueRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void declareQueueRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareQueueRequest.queue_name)
}

// bool exclusive = 4;
void declareQueueRequest::clear_exclusive() {
  exclusive_ = false;
}
bool declareQueueRequest::exclusive() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.exclusive)
  return exclusive_;
}
void declareQueueRequest::set_exclusive(bool value) {
  
  exclusive_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.exclusive)
}

// bool durable = 5;
void declareQueueRequest::clear_durable() {
  durable_ = false;
}
bool declareQueueRequest::durable() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.durable)
  return durable_;
}
void declareQueueRequest::set_durable(bool value) {
  
  durable_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.durable)
}

// bool auto_delete = 6;
void declareQueueRequest::clear_auto_delete() {
  auto_delete_ = false;
}
bool declareQueueRequest::auto_delete() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.auto_delete)
  return auto_delete_;
}
void declareQueueRequest::set_auto_delete(bool value) {
  
  auto_delete_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.auto_delete)
}

// map<string, string> args = 7;
int declareQueueRequest::args_size() const {
  return args_.size();
}
void declareQueueRequest::clear_args() {
  args_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
declareQueueRequest::args() const {
  // @@protoc_insertion_point(field_map:bitmq.declareQueueRequest.args)
  return args_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
declareQueueRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:bitmq.declareQueueRequest.args)
  return args_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int deleteQueueRequest::kRidFieldNumber;
const int deleteQueueRequest::kCidFieldNumber;
const int deleteQueueRequest::kQueueNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

deleteQueueRequest::deleteQueueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.deleteQueueRequest)
}
deleteQueueRequest::deleteQueueRequest(const deleteQueueRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_name().size() > 0) {
    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.deleteQueueRequest)
}

void deleteQueueRequest::SharedCtor() {
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

deleteQueueRequest::~deleteQueueRequest() {
  // @@protoc_insertion_point(destructor:bitmq.deleteQueueRequest)
  SharedDtor();
}

void deleteQueueRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void deleteQueueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* deleteQueueRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[7].descriptor;
}

const deleteQueueRequest& deleteQueueRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

deleteQueueRequest* deleteQueueRequest::New(::google::protobuf::Arena* arena) const {
  deleteQueueRequest* n = new deleteQueueRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void deleteQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.deleteQueueRequest)
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool deleteQueueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.deleteQueueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.deleteQueueRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.deleteQueueRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string queue_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_name().data(), this->queue_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.deleteQueueRequest.queue_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.deleteQueueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.deleteQueueRequest)
  return false;
#undef DO_
}

void deleteQueueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.deleteQueueRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteQueueRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteQueueRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // string queue_name = 3;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteQueueRequest.queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->queue_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.deleteQueueRequest)
}

::google::protobuf::uint8* deleteQueueRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.deleteQueueRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteQueueRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteQueueRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // string queue_name = 3;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteQueueRequest.queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->queue_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.deleteQueueRequest)
  return target;
}

size_t deleteQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.deleteQueueRequest)
  size_t total_size = 0;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // string queue_name = 3;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void deleteQueueRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.deleteQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const deleteQueueRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const deleteQueueRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.deleteQueueRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.deleteQueueRequest)
    MergeFrom(*source);
  }
}

void deleteQueueRequest::MergeFrom(const deleteQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.deleteQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
}

void deleteQueueRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.deleteQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deleteQueueRequest::CopyFrom(const deleteQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.deleteQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteQueueRequest::IsInitialized() const {
  return true;
}

void deleteQueueRequest::Swap(deleteQueueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void deleteQueueRequest::InternalSwap(deleteQueueRequest* other) {
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  queue_name_.Swap(&other->queue_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata deleteQueueRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// deleteQueueRequest

// string rid = 1;
void deleteQueueRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& deleteQueueRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteQueueRequest.rid)
  return rid_.GetNoArena();
}
void deleteQueueRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteQueueRequest.rid)
}
#if LANG_CXX11
void deleteQueueRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteQueueRequest.rid)
}
#endif
void deleteQueueRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteQueueRequest.rid)
}
void deleteQueueRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteQueueRequest.rid)
}
::std::string* deleteQueueRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteQueueRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* deleteQueueRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.deleteQueueRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void deleteQueueRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteQueueRequest.rid)
}

// string cid = 2;
void deleteQueueRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& deleteQueueRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteQueueRequest.cid)
  return cid_.GetNoArena();
}
void deleteQueueRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteQueueRequest.cid)
}
#if LANG_CXX11
void deleteQueueRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteQueueRequest.cid)
}
#endif
void deleteQueueRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteQueueRequest.cid)
}
void deleteQueueRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteQueueRequest.cid)
}
::std::string* deleteQueueRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteQueueRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* deleteQueueRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.deleteQueueRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void deleteQueueRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteQueueRequest.cid)
}

// string queue_name = 3;
void deleteQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& deleteQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteQueueRequest.queue_name)
  return queue_name_.GetNoArena();
}
void deleteQueueRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteQueueRequest.queue_name)
}
#if LANG_CXX11
void deleteQueueRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteQueueRequest.queue_name)
}
#endif
void deleteQueueRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteQueueRequest.queue_name)
}
void deleteQueueRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteQueueRequest.queue_name)
}
::std::string* deleteQueueRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteQueueRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* deleteQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.deleteQueueRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void deleteQueueRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteQueueRequest.queue_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int queueBindRequest::kRidFieldNumber;
const int queueBindRequest::kCidFieldNumber;
const int queueBindRequest::kExchangeNameFieldNumber;
const int queueBindRequest::kQueueNameFieldNumber;
const int queueBindRequest::kBindingKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

queueBindRequest::queueBindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.queueBindRequest)
}
queueBindRequest::queueBindRequest(const queueBindRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  exchange_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_name().size() > 0) {
    exchange_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_name_);
  }
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_name().size() > 0) {
    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  binding_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.binding_key().size() > 0) {
    binding_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binding_key_);
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.queueBindRequest)
}

void queueBindRequest::SharedCtor() {
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binding_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

queueBindRequest::~queueBindRequest() {
  // @@protoc_insertion_point(destructor:bitmq.queueBindRequest)
  SharedDtor();
}

void queueBindRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binding_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void queueBindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queueBindRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[8].descriptor;
}

const queueBindRequest& queueBindRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

queueBindRequest* queueBindRequest::New(::google::protobuf::Arena* arena) const {
  queueBindRequest* n = new queueBindRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void queueBindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.queueBindRequest)
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binding_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool queueBindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.queueBindRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.queueBindRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.queueBindRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_name().data(), this->exchange_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.queueBindRequest.exchange_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string queue_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_name().data(), this->queue_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.queueBindRequest.queue_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string binding_key = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binding_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->binding_key().data(), this->binding_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.queueBindRequest.binding_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.queueBindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.queueBindRequest)
  return false;
#undef DO_
}

void queueBindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.queueBindRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.exchange_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange_name(), output);
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->queue_name(), output);
  }

  // string binding_key = 5;
  if (this->binding_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->binding_key().data(), this->binding_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.binding_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->binding_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.queueBindRequest)
}

::google::protobuf::uint8* queueBindRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.queueBindRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.exchange_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange_name(), target);
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->queue_name(), target);
  }

  // string binding_key = 5;
  if (this->binding_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->binding_key().data(), this->binding_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.binding_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->binding_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.queueBindRequest)
  return target;
}

size_t queueBindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.queueBindRequest)
  size_t total_size = 0;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_name());
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_name());
  }

  // string binding_key = 5;
  if (this->binding_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->binding_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queueBindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.queueBindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const queueBindRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const queueBindRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.queueBindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.queueBindRequest)
    MergeFrom(*source);
  }
}

void queueBindRequest::MergeFrom(const queueBindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.queueBindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.exchange_name().size() > 0) {

    exchange_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_name_);
  }
  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.binding_key().size() > 0) {

    binding_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binding_key_);
  }
}

void queueBindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.queueBindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queueBindRequest::CopyFrom(const queueBindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.queueBindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queueBindRequest::IsInitialized() const {
  return true;
}

void queueBindRequest::Swap(queueBindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void queueBindRequest::InternalSwap(queueBindRequest* other) {
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  exchange_name_.Swap(&other->exchange_name_);
  queue_name_.Swap(&other->queue_name_);
  binding_key_.Swap(&other->binding_key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata queueBindRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// queueBindRequest

// string rid = 1;
void queueBindRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& queueBindRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.queueBindRequest.rid)
  return rid_.GetNoArena();
}
void queueBindRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueBindRequest.rid)
}
#if LANG_CXX11
void queueBindRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueBindRequest.rid)
}
#endif
void queueBindRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueBindRequest.rid)
}
void queueBindRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueBindRequest.rid)
}
::std::string* queueBindRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueBindRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* queueBindRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.queueBindRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void queueBindRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueBindRequest.rid)
}

// string cid = 2;
void queueBindRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& queueBindRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.queueBindRequest.cid)
  return cid_.GetNoArena();
}
void queueBindRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueBindRequest.cid)
}
#if LANG_CXX11
void queueBindRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueBindRequest.cid)
}
#endif
void queueBindRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueBindRequest.cid)
}
void queueBindRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueBindRequest.cid)
}
::std::string* queueBindRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueBindRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* queueBindRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.queueBindRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void queueBindRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueBindRequest.cid)
}

// string exchange_name = 3;
void queueBindRequest::clear_exchange_name() {
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& queueBindRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:bitmq.queueBindRequest.exchange_name)
  return exchange_name_.GetNoArena();
}
void queueBindRequest::set_exchange_name(const ::std::string& value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueBindRequest.exchange_name)
}
#if LANG_CXX11
void queueBindRequest::set_exchange_name(::std::string&& value) {
  
  exchange_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueBindRequest.exchange_name)
}
#endif
void queueBindRequest::set_exchange_name(const char* value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueBindRequest.exchange_name)
}
void queueBindRequest::set_exchange_name(const char* value, size_t size) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueBindRequest.exchange_name)
}
::std::string* queueBindRequest::mutable_exchange_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueBindRequest.exchange_name)
  return exchange_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* queueBindRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:bitmq.queueBindRequest.exchange_name)
  
  return exchange_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void queueBindRequest::set_allocated_exchange_name(::std::string* exchange_name) {
  if (exchange_name != NULL) {
    
  } else {
    
  }
  exchange_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueBindRequest.exchange_name)
}

// string queue_name = 4;
void queueBindRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& queueBindRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.queueBindRequest.queue_name)
  return queue_name_.GetNoArena();
}
void queueBindRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueBindRequest.queue_name)
}
#if LANG_CXX11
void queueBindRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueBindRequest.queue_name)
}
#endif
void queueBindRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueBindRequest.queue_name)
}
void queueBindRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueBindRequest.queue_name)
}
::std::string* queueBindRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueBindRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* queueBindRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.queueBindRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void queueBindRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueBindRequest.queue_name)
}

// string binding_key = 5;
void queueBindRequest::clear_binding_key() {
  binding_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& queueBindRequest::binding_key() const {
  // @@protoc_insertion_point(field_get:bitmq.queueBindRequest.binding_key)
  return binding_key_.GetNoArena();
}
void queueBindRequest::set_binding_key(const ::std::string& value) {
  
  binding_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueBindRequest.binding_key)
}
#if LANG_CXX11
void queueBindRequest::set_binding_key(::std::string&& value) {
  
  binding_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueBindRequest.binding_key)
}
#endif
void queueBindRequest::set_binding_key(const char* value) {
  
  binding_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueBindRequest.binding_key)
}
void queueBindRequest::set_binding_key(const char* value, size_t size) {
  
  binding_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueBindRequest.binding_key)
}
::std::string* queueBindRequest::mutable_binding_key() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueBindRequest.binding_key)
  return binding_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* queueBindRequest::release_binding_key() {
  // @@protoc_insertion_point(field_release:bitmq.queueBindRequest.binding_key)
  
  return binding_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void queueBindRequest::set_allocated_binding_key(::std::string* binding_key) {
  if (binding_key != NULL) {
    
  } else {
    
  }
  binding_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binding_key);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueBindRequest.binding_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int queueUnBindRequest::kRidFieldNumber;
const int queueUnBindRequest::kCidFieldNumber;
const int queueUnBindRequest::kExchangeNameFieldNumber;
const int queueUnBindRequest::kQueueNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

queueUnBindRequest::queueUnBindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.queueUnBindRequest)
}
queueUnBindRequest::queueUnBindRequest(const queueUnBindRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  exchange_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_name().size() > 0) {
    exchange_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_name_);
  }
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_name().size() > 0) {
    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.queueUnBindRequest)
}

void queueUnBindRequest::SharedCtor() {
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

queueUnBindRequest::~queueUnBindRequest() {
  // @@protoc_insertion_point(destructor:bitmq.queueUnBindRequest)
  SharedDtor();
}

void queueUnBindRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void queueUnBindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queueUnBindRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[9].descriptor;
}

const queueUnBindRequest& queueUnBindRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

queueUnBindRequest* queueUnBindRequest::New(::google::protobuf::Arena* arena) const {
  queueUnBindRequest* n = new queueUnBindRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void queueUnBindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.queueUnBindRequest)
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool queueUnBindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.queueUnBindRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.queueUnBindRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.queueUnBindRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_name().data(), this->exchange_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.queueUnBindRequest.exchange_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string queue_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_name().data(), this->queue_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.queueUnBindRequest.queue_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.queueUnBindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.queueUnBindRequest)
  return false;
#undef DO_
}

void queueUnBindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.queueUnBindRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.exchange_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange_name(), output);
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->queue_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.queueUnBindRequest)
}

::google::protobuf::uint8* queueUnBindRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.queueUnBindRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.exchange_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange_name(), target);
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->queue_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.queueUnBindRequest)
  return target;
}

size_t queueUnBindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.queueUnBindRequest)
  size_t total_size = 0;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_name());
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queueUnBindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.queueUnBindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const queueUnBindRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const queueUnBindRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.queueUnBindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.queueUnBindRequest)
    MergeFrom(*source);
  }
}

void queueUnBindRequest::MergeFrom(const queueUnBindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.queueUnBindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.exchange_name().size() > 0) {

    exchange_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_name_);
  }
  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
}

void queueUnBindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.queueUnBindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queueUnBindRequest::CopyFrom(const queueUnBindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.queueUnBindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queueUnBindRequest::IsInitialized() const {
  return true;
}

void queueUnBindRequest::Swap(queueUnBindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void queueUnBindRequest::InternalSwap(queueUnBindRequest* other) {
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  exchange_name_.Swap(&other->exchange_name_);
  queue_name_.Swap(&other->queue_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata queueUnBindRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// queueUnBindRequest

// string rid = 1;
void queueUnBindRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& queueUnBindRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.queueUnBindRequest.rid)
  return rid_.GetNoArena();
}
void queueUnBindRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueUnBindRequest.rid)
}
#if LANG_CXX11
void queueUnBindRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueUnBindRequest.rid)
}
#endif
void queueUnBindRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueUnBindRequest.rid)
}
void queueUnBindRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueUnBindRequest.rid)
}
::std::string* queueUnBindRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueUnBindRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* queueUnBindRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.queueUnBindRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void queueUnBindRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueUnBindRequest.rid)
}

// string cid = 2;
void queueUnBindRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& queueUnBindRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.queueUnBindRequest.cid)
  return cid_.GetNoArena();
}
void queueUnBindRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueUnBindRequest.cid)
}
#if LANG_CXX11
void queueUnBindRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueUnBindRequest.cid)
}
#endif
void queueUnBindRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueUnBindRequest.cid)
}
void queueUnBindRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueUnBindRequest.cid)
}
::std::string* queueUnBindRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueUnBindRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* queueUnBindRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.queueUnBindRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void queueUnBindRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueUnBindRequest.cid)
}

// string exchange_name = 3;
void queueUnBindRequest::clear_exchange_name() {
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& queueUnBindRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:bitmq.queueUnBindRequest.exchange_name)
  return exchange_name_.GetNoArena();
}
void queueUnBindRequest::set_exchange_name(const ::std::string& value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueUnBindRequest.exchange_name)
}
#if LANG_CXX11
void queueUnBindRequest::set_exchange_name(::std::string&& value) {
  
  exchange_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueUnBindRequest.exchange_name)
}
#endif
void queueUnBindRequest::set_exchange_name(const char* value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueUnBindRequest.exchange_name)
}
void queueUnBindRequest::set_exchange_name(const char* value, size_t size) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueUnBindRequest.exchange_name)
}
::std::string* queueUnBindRequest::mutable_exchange_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueUnBindRequest.exchange_name)
  return exchange_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* queueUnBindRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:bitmq.queueUnBindRequest.exchange_name)
  
  return exchange_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void queueUnBindRequest::set_allocated_exchange_name(::std::string* exchange_name) {
  if (exchange_name != NULL) {
    
  } else {
    
  }
  exchange_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueUnBindRequest.exchange_name)
}

// string queue_name = 4;
void queueUnBindRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& queueUnBindRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.queueUnBindRequest.queue_name)
  return queue_name_.GetNoArena();
}
void queueUnBindRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueUnBindRequest.queue_name)
}
#if LANG_CXX11
void queueUnBindRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueUnBindRequest.queue_name)
}
#endif
void queueUnBindRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueUnBindRequest.queue_name)
}
void queueUnBindRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueUnBindRequest.queue_name)
}
::std::string* queueUnBindRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueUnBindRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* queueUnBindRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.queueUnBindRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void queueUnBindRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueUnBindRequest.queue_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int basicPublishRequest::kRidFieldNumber;
const int basicPublishRequest::kCidFieldNumber;
const int basicPublishRequest::kExchangeNameFieldNumber;
const int basicPublishRequest::kBodyFieldNumber;
const int basicPublishRequest::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

basicPublishRequest::basicPublishRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.basicPublishRequest)
}
basicPublishRequest::basicPublishRequest(const basicPublishRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  exchange_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_name().size() > 0) {
    exchange_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_name_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_properties()) {
    properties_ = new ::bitmq::BasicProperties(*from.properties_);
  } else {
    properties_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.basicPublishRequest)
}

void basicPublishRequest::SharedCtor() {
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_ = NULL;
  _cached_size_ = 0;
}

basicPublishRequest::~basicPublishRequest() {
  // @@protoc_insertion_point(destructor:bitmq.basicPublishRequest)
  SharedDtor();
}

void basicPublishRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete properties_;
  }
}

void basicPublishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* basicPublishRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[10].descriptor;
}

const basicPublishRequest& basicPublishRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

basicPublishRequest* basicPublishRequest::New(::google::protobuf::Arena* arena) const {
  basicPublishRequest* n = new basicPublishRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void basicPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicPublishRequest)
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && properties_ != NULL) {
    delete properties_;
  }
  properties_ = NULL;
}

bool basicPublishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.basicPublishRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicPublishRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicPublishRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_name().data(), this->exchange_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicPublishRequest.exchange_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string body = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicPublishRequest.body"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bitmq.BasicProperties properties = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.basicPublishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.basicPublishRequest)
  return false;
#undef DO_
}

void basicPublishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.basicPublishRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.exchange_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange_name(), output);
  }

  // string body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->body(), output);
  }

  // .bitmq.BasicProperties properties = 5;
  if (this->has_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->properties_, output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.basicPublishRequest)
}

::google::protobuf::uint8* basicPublishRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicPublishRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.exchange_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange_name(), target);
  }

  // string body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->body(), target);
  }

  // .bitmq.BasicProperties properties = 5;
  if (this->has_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->properties_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicPublishRequest)
  return target;
}

size_t basicPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicPublishRequest)
  size_t total_size = 0;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_name());
  }

  // string body = 4;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  // .bitmq.BasicProperties properties = 5;
  if (this->has_properties()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->properties_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void basicPublishRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.basicPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const basicPublishRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const basicPublishRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.basicPublishRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.basicPublishRequest)
    MergeFrom(*source);
  }
}

void basicPublishRequest::MergeFrom(const basicPublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.exchange_name().size() > 0) {

    exchange_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_name_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_properties()) {
    mutable_properties()->::bitmq::BasicProperties::MergeFrom(from.properties());
  }
}

void basicPublishRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.basicPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void basicPublishRequest::CopyFrom(const basicPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicPublishRequest::IsInitialized() const {
  return true;
}

void basicPublishRequest::Swap(basicPublishRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void basicPublishRequest::InternalSwap(basicPublishRequest* other) {
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  exchange_name_.Swap(&other->exchange_name_);
  body_.Swap(&other->body_);
  std::swap(properties_, other->properties_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata basicPublishRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// basicPublishRequest

// string rid = 1;
void basicPublishRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicPublishRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicPublishRequest.rid)
  return rid_.GetNoArena();
}
void basicPublishRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicPublishRequest.rid)
}
#if LANG_CXX11
void basicPublishRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicPublishRequest.rid)
}
#endif
void basicPublishRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicPublishRequest.rid)
}
void basicPublishRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicPublishRequest.rid)
}
::std::string* basicPublishRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicPublishRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicPublishRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.basicPublishRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicPublishRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicPublishRequest.rid)
}

// string cid = 2;
void basicPublishRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicPublishRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicPublishRequest.cid)
  return cid_.GetNoArena();
}
void basicPublishRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicPublishRequest.cid)
}
#if LANG_CXX11
void basicPublishRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicPublishRequest.cid)
}
#endif
void basicPublishRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicPublishRequest.cid)
}
void basicPublishRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicPublishRequest.cid)
}
::std::string* basicPublishRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicPublishRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicPublishRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicPublishRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicPublishRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicPublishRequest.cid)
}

// string exchange_name = 3;
void basicPublishRequest::clear_exchange_name() {
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicPublishRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:bitmq.basicPublishRequest.exchange_name)
  return exchange_name_.GetNoArena();
}
void basicPublishRequest::set_exchange_name(const ::std::string& value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicPublishRequest.exchange_name)
}
#if LANG_CXX11
void basicPublishRequest::set_exchange_name(::std::string&& value) {
  
  exchange_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicPublishRequest.exchange_name)
}
#endif
void basicPublishRequest::set_exchange_name(const char* value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicPublishRequest.exchange_name)
}
void basicPublishRequest::set_exchange_name(const char* value, size_t size) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicPublishRequest.exchange_name)
}
::std::string* basicPublishRequest::mutable_exchange_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicPublishRequest.exchange_name)
  return exchange_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicPublishRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:bitmq.basicPublishRequest.exchange_name)
  
  return exchange_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicPublishRequest::set_allocated_exchange_name(::std::string* exchange_name) {
  if (exchange_name != NULL) {
    
  } else {
    
  }
  exchange_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicPublishRequest.exchange_name)
}

// string body = 4;
void basicPublishRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicPublishRequest::body() const {
  // @@protoc_insertion_point(field_get:bitmq.basicPublishRequest.body)
  return body_.GetNoArena();
}
void basicPublishRequest::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicPublishRequest.body)
}
#if LANG_CXX11
void basicPublishRequest::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicPublishRequest.body)
}
#endif
void basicPublishRequest::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicPublishRequest.body)
}
void basicPublishRequest::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicPublishRequest.body)
}
::std::string* basicPublishRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicPublishRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicPublishRequest::release_body() {
  // @@protoc_insertion_point(field_release:bitmq.basicPublishRequest.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicPublishRequest::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicPublishRequest.body)
}

// .bitmq.BasicProperties properties = 5;
bool basicPublishRequest::has_properties() const {
  return this != internal_default_instance() && properties_ != NULL;
}
void basicPublishRequest::clear_properties() {
  if (GetArenaNoVirtual() == NULL && properties_ != NULL) delete properties_;
  properties_ = NULL;
}
const ::bitmq::BasicProperties& basicPublishRequest::properties() const {
  // @@protoc_insertion_point(field_get:bitmq.basicPublishRequest.properties)
  return properties_ != NULL ? *properties_
                         : *::bitmq::BasicProperties::internal_default_instance();
}
::bitmq::BasicProperties* basicPublishRequest::mutable_properties() {
  
  if (properties_ == NULL) {
    properties_ = new ::bitmq::BasicProperties;
  }
  // @@protoc_insertion_point(field_mutable:bitmq.basicPublishRequest.properties)
  return properties_;
}
::bitmq::BasicProperties* basicPublishRequest::release_properties() {
  // @@protoc_insertion_point(field_release:bitmq.basicPublishRequest.properties)
  
  ::bitmq::BasicProperties* temp = properties_;
  properties_ = NULL;
  return temp;
}
void basicPublishRequest::set_allocated_properties(::bitmq::BasicProperties* properties) {
  delete properties_;
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicPublishRequest.properties)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int basicAckRequest::kRidFieldNumber;
const int basicAckRequest::kCidFieldNumber;
const int basicAckRequest::kQueueNameFieldNumber;
const int basicAckRequest::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

basicAckRequest::basicAckRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.basicAckRequest)
}
basicAckRequest::basicAckRequest(const basicAckRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_name().size() > 0) {
    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_id().size() > 0) {
    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.basicAckRequest)
}

void basicAckRequest::SharedCtor() {
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

basicAckRequest::~basicAckRequest() {
  // @@protoc_insertion_point(destructor:bitmq.basicAckRequest)
  SharedDtor();
}

void basicAckRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void basicAckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* basicAckRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[11].descriptor;
}

const basicAckRequest& basicAckRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

basicAckRequest* basicAckRequest::New(::google::protobuf::Arena* arena) const {
  basicAckRequest* n = new basicAckRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void basicAckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicAckRequest)
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool basicAckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.basicAckRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicAckRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicAckRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string queue_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_name().data(), this->queue_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicAckRequest.queue_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), this->message_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicAckRequest.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.basicAckRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.basicAckRequest)
  return false;
#undef DO_
}

void basicAckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.basicAckRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // string queue_name = 3;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->queue_name(), output);
  }

  // string message_id = 4;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.basicAckRequest)
}

::google::protobuf::uint8* basicAckRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicAckRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // string queue_name = 3;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->queue_name(), target);
  }

  // string message_id = 4;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicAckRequest)
  return target;
}

size_t basicAckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicAckRequest)
  size_t total_size = 0;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // string queue_name = 3;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_name());
  }

  // string message_id = 4;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void basicAckRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.basicAckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const basicAckRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const basicAckRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.basicAckRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.basicAckRequest)
    MergeFrom(*source);
  }
}

void basicAckRequest::MergeFrom(const basicAckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicAckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
}

void basicAckRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.basicAckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void basicAckRequest::CopyFrom(const basicAckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicAckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicAckRequest::IsInitialized() const {
  return true;
}

void basicAckRequest::Swap(basicAckRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void basicAckRequest::InternalSwap(basicAckRequest* other) {
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  queue_name_.Swap(&other->queue_name_);
  message_id_.Swap(&other->message_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata basicAckRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// basicAckRequest

// string rid = 1;
void basicAckRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicAckRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicAckRequest.rid)
  return rid_.GetNoArena();
}
void basicAckRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicAckRequest.rid)
}
#if LANG_CXX11
void basicAckRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicAckRequest.rid)
}
#endif
void basicAckRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicAckRequest.rid)
}
void basicAckRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicAckRequest.rid)
}
::std::string* basicAckRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicAckRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicAckRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.basicAckRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicAckRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicAckRequest.rid)
}

// string cid = 2;
void basicAckRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicAckRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicAckRequest.cid)
  return cid_.GetNoArena();
}
void basicAckRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicAckRequest.cid)
}
#if LANG_CXX11
void basicAckRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicAckRequest.cid)
}
#endif
void basicAckRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicAckRequest.cid)
}
void basicAckRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicAckRequest.cid)
}
::std::string* basicAckRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicAckRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicAckRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicAckRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicAckRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicAckRequest.cid)
}

// string queue_name = 3;
void basicAckRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicAckRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.basicAckRequest.queue_name)
  return queue_name_.GetNoArena();
}
void basicAckRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicAckRequest.queue_name)
}
#if LANG_CXX11
void basicAckRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicAckRequest.queue_name)
}
#endif
void basicAckRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicAckRequest.queue_name)
}
void basicAckRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicAckRequest.queue_name)
}
::std::string* basicAckRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicAckRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicAckRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.basicAckRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicAckRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicAckRequest.queue_name)
}

// string message_id = 4;
void basicAckRequest::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicAckRequest::message_id() const {
  // @@protoc_insertion_point(field_get:bitmq.basicAckRequest.message_id)
  return message_id_.GetNoArena();
}
void basicAckRequest::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicAckRequest.message_id)
}
#if LANG_CXX11
void basicAckRequest::set_message_id(::std::string&& value) {
  
  message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicAckRequest.message_id)
}
#endif
void basicAckRequest::set_message_id(const char* value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicAckRequest.message_id)
}
void basicAckRequest::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicAckRequest.message_id)
}
::std::string* basicAckRequest::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicAckRequest.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicAckRequest::release_message_id() {
  // @@protoc_insertion_point(field_release:bitmq.basicAckRequest.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicAckRequest::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicAckRequest.message_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int basicConsumeRequest::kRidFieldNumber;
const int basicConsumeRequest::kCidFieldNumber;
const int basicConsumeRequest::kConsumerTagFieldNumber;
const int basicConsumeRequest::kQueueNameFieldNumber;
const int basicConsumeRequest::kAutoAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

basicConsumeRequest::basicConsumeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.basicConsumeRequest)
}
basicConsumeRequest::basicConsumeRequest(const basicConsumeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  consumer_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.consumer_tag().size() > 0) {
    consumer_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_tag_);
  }
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_name().size() > 0) {
    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  auto_ack_ = from.auto_ack_;
  // @@protoc_insertion_point(copy_constructor:bitmq.basicConsumeRequest)
}

void basicConsumeRequest::SharedCtor() {
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auto_ack_ = false;
  _cached_size_ = 0;
}

basicConsumeRequest::~basicConsumeRequest() {
  // @@protoc_insertion_point(destructor:bitmq.basicConsumeRequest)
  SharedDtor();
}

void basicConsumeRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void basicConsumeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* basicConsumeRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[12].descriptor;
}

const basicConsumeRequest& basicConsumeRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

basicConsumeRequest* basicConsumeRequest::New(::google::protobuf::Arena* arena) const {
  basicConsumeRequest* n = new basicConsumeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void basicConsumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicConsumeRequest)
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auto_ack_ = false;
}

bool basicConsumeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.basicConsumeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicConsumeRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicConsumeRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string consumer_tag = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumer_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consumer_tag().data(), this->consumer_tag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicConsumeRequest.consumer_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string queue_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_name().data(), this->queue_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicConsumeRequest.queue_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool auto_ack = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.basicConsumeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.basicConsumeRequest)
  return false;
#undef DO_
}

void basicConsumeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.basicConsumeRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // string consumer_tag = 3;
  if (this->consumer_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_tag().data(), this->consumer_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.consumer_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->consumer_tag(), output);
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->queue_name(), output);
  }

  // bool auto_ack = 5;
  if (this->auto_ack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->auto_ack(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.basicConsumeRequest)
}

::google::protobuf::uint8* basicConsumeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicConsumeRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // string consumer_tag = 3;
  if (this->consumer_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_tag().data(), this->consumer_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.consumer_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->consumer_tag(), target);
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->queue_name(), target);
  }

  // bool auto_ack = 5;
  if (this->auto_ack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->auto_ack(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicConsumeRequest)
  return target;
}

size_t basicConsumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicConsumeRequest)
  size_t total_size = 0;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // string consumer_tag = 3;
  if (this->consumer_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->consumer_tag());
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_name());
  }

  // bool auto_ack = 5;
  if (this->auto_ack() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void basicConsumeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.basicConsumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const basicConsumeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const basicConsumeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.basicConsumeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.basicConsumeRequest)
    MergeFrom(*source);
  }
}

void basicConsumeRequest::MergeFrom(const basicConsumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicConsumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.consumer_tag().size() > 0) {

    consumer_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_tag_);
  }
  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.auto_ack() != 0) {
    set_auto_ack(from.auto_ack());
  }
}

void basicConsumeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.basicConsumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void basicConsumeRequest::CopyFrom(const basicConsumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicConsumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicConsumeRequest::IsInitialized() const {
  return true;
}

void basicConsumeRequest::Swap(basicConsumeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void basicConsumeRequest::InternalSwap(basicConsumeRequest* other) {
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  consumer_tag_.Swap(&other->consumer_tag_);
  queue_name_.Swap(&other->queue_name_);
  std::swap(auto_ack_, other->auto_ack_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata basicConsumeRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// basicConsumeRequest

// string rid = 1;
void basicConsumeRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicConsumeRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeRequest.rid)
  return rid_.GetNoArena();
}
void basicConsumeRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeRequest.rid)
}
#if LANG_CXX11
void basicConsumeRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeRequest.rid)
}
#endif
void basicConsumeRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeRequest.rid)
}
void basicConsumeRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeRequest.rid)
}
::std::string* basicConsumeRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicConsumeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicConsumeRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeRequest.rid)
}

// string cid = 2;
void basicConsumeRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicConsumeRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeRequest.cid)
  return cid_.GetNoArena();
}
void basicConsumeRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeRequest.cid)
}
#if LANG_CXX11
void basicConsumeRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeRequest.cid)
}
#endif
void basicConsumeRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeRequest.cid)
}
void basicConsumeRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeRequest.cid)
}
::std::string* basicConsumeRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicConsumeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicConsumeRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeRequest.cid)
}

// string consumer_tag = 3;
void basicConsumeRequest::clear_consumer_tag() {
  consumer_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicConsumeRequest::consumer_tag() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeRequest.consumer_tag)
  return consumer_tag_.GetNoArena();
}
void basicConsumeRequest::set_consumer_tag(const ::std::string& value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeRequest.consumer_tag)
}
#if LANG_CXX11
void basicConsumeRequest::set_consumer_tag(::std::string&& value) {
  
  consumer_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeRequest.consumer_tag)
}
#endif
void basicConsumeRequest::set_consumer_tag(const char* value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeRequest.consumer_tag)
}
void basicConsumeRequest::set_consumer_tag(const char* value, size_t size) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeRequest.consumer_tag)
}
::std::string* basicConsumeRequest::mutable_consumer_tag() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeRequest.consumer_tag)
  return consumer_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicConsumeRequest::release_consumer_tag() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeRequest.consumer_tag)
  
  return consumer_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicConsumeRequest::set_allocated_consumer_tag(::std::string* consumer_tag) {
  if (consumer_tag != NULL) {
    
  } else {
    
  }
  consumer_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_tag);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeRequest.consumer_tag)
}

// string queue_name = 4;
void basicConsumeRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicConsumeRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeRequest.queue_name)
  return queue_name_.GetNoArena();
}
void basicConsumeRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeRequest.queue_name)
}
#if LANG_CXX11
void basicConsumeRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeRequest.queue_name)
}
#endif
void basicConsumeRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeRequest.queue_name)
}
void basicConsumeRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeRequest.queue_name)
}
::std::string* basicConsumeRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicConsumeRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicConsumeRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeRequest.queue_name)
}

// bool auto_ack = 5;
void basicConsumeRequest::clear_auto_ack() {
  auto_ack_ = false;
}
bool basicConsumeRequest::auto_ack() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeRequest.auto_ack)
  return auto_ack_;
}
void basicConsumeRequest::set_auto_ack(bool value) {
  
  auto_ack_ = value;
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeRequest.auto_ack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int basicCancelRequest::kRidFieldNumber;
const int basicCancelRequest::kCidFieldNumber;
const int basicCancelRequest::kConsumerTagFieldNumber;
const int basicCancelRequest::kQueueNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

basicCancelRequest::basicCancelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.basicCancelRequest)
}
basicCancelRequest::basicCancelRequest(const basicCancelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  consumer_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.consumer_tag().size() > 0) {
    consumer_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_tag_);
  }
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_name().size() > 0) {
    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.basicCancelRequest)
}

void basicCancelRequest::SharedCtor() {
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

basicCancelRequest::~basicCancelRequest() {
  // @@protoc_insertion_point(destructor:bitmq.basicCancelRequest)
  SharedDtor();
}

void basicCancelRequest::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void basicCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* basicCancelRequest::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[13].descriptor;
}

const basicCancelRequest& basicCancelRequest::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

basicCancelRequest* basicCancelRequest::New(::google::protobuf::Arena* arena) const {
  basicCancelRequest* n = new basicCancelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void basicCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicCancelRequest)
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool basicCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.basicCancelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicCancelRequest.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicCancelRequest.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string consumer_tag = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumer_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consumer_tag().data(), this->consumer_tag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicCancelRequest.consumer_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string queue_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_name().data(), this->queue_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicCancelRequest.queue_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.basicCancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.basicCancelRequest)
  return false;
#undef DO_
}

void basicCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.basicCancelRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // string consumer_tag = 3;
  if (this->consumer_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_tag().data(), this->consumer_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.consumer_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->consumer_tag(), output);
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->queue_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.basicCancelRequest)
}

::google::protobuf::uint8* basicCancelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicCancelRequest)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // string consumer_tag = 3;
  if (this->consumer_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_tag().data(), this->consumer_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.consumer_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->consumer_tag(), target);
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->queue_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicCancelRequest)
  return target;
}

size_t basicCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicCancelRequest)
  size_t total_size = 0;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // string consumer_tag = 3;
  if (this->consumer_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->consumer_tag());
  }

  // string queue_name = 4;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void basicCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.basicCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const basicCancelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const basicCancelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.basicCancelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.basicCancelRequest)
    MergeFrom(*source);
  }
}

void basicCancelRequest::MergeFrom(const basicCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.consumer_tag().size() > 0) {

    consumer_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_tag_);
  }
  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
}

void basicCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.basicCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void basicCancelRequest::CopyFrom(const basicCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicCancelRequest::IsInitialized() const {
  return true;
}

void basicCancelRequest::Swap(basicCancelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void basicCancelRequest::InternalSwap(basicCancelRequest* other) {
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  consumer_tag_.Swap(&other->consumer_tag_);
  queue_name_.Swap(&other->queue_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata basicCancelRequest::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// basicCancelRequest

// string rid = 1;
void basicCancelRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicCancelRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCancelRequest.rid)
  return rid_.GetNoArena();
}
void basicCancelRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCancelRequest.rid)
}
#if LANG_CXX11
void basicCancelRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCancelRequest.rid)
}
#endif
void basicCancelRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCancelRequest.rid)
}
void basicCancelRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCancelRequest.rid)
}
::std::string* basicCancelRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCancelRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicCancelRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.basicCancelRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicCancelRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCancelRequest.rid)
}

// string cid = 2;
void basicCancelRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicCancelRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCancelRequest.cid)
  return cid_.GetNoArena();
}
void basicCancelRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCancelRequest.cid)
}
#if LANG_CXX11
void basicCancelRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCancelRequest.cid)
}
#endif
void basicCancelRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCancelRequest.cid)
}
void basicCancelRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCancelRequest.cid)
}
::std::string* basicCancelRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCancelRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicCancelRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicCancelRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicCancelRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCancelRequest.cid)
}

// string consumer_tag = 3;
void basicCancelRequest::clear_consumer_tag() {
  consumer_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicCancelRequest::consumer_tag() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCancelRequest.consumer_tag)
  return consumer_tag_.GetNoArena();
}
void basicCancelRequest::set_consumer_tag(const ::std::string& value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCancelRequest.consumer_tag)
}
#if LANG_CXX11
void basicCancelRequest::set_consumer_tag(::std::string&& value) {
  
  consumer_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCancelRequest.consumer_tag)
}
#endif
void basicCancelRequest::set_consumer_tag(const char* value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCancelRequest.consumer_tag)
}
void basicCancelRequest::set_consumer_tag(const char* value, size_t size) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCancelRequest.consumer_tag)
}
::std::string* basicCancelRequest::mutable_consumer_tag() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCancelRequest.consumer_tag)
  return consumer_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicCancelRequest::release_consumer_tag() {
  // @@protoc_insertion_point(field_release:bitmq.basicCancelRequest.consumer_tag)
  
  return consumer_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicCancelRequest::set_allocated_consumer_tag(::std::string* consumer_tag) {
  if (consumer_tag != NULL) {
    
  } else {
    
  }
  consumer_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_tag);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCancelRequest.consumer_tag)
}

// string queue_name = 4;
void basicCancelRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicCancelRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCancelRequest.queue_name)
  return queue_name_.GetNoArena();
}
void basicCancelRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCancelRequest.queue_name)
}
#if LANG_CXX11
void basicCancelRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCancelRequest.queue_name)
}
#endif
void basicCancelRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCancelRequest.queue_name)
}
void basicCancelRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCancelRequest.queue_name)
}
::std::string* basicCancelRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCancelRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicCancelRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.basicCancelRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicCancelRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCancelRequest.queue_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int basicConsumeResponse::kCidFieldNumber;
const int basicConsumeResponse::kConsumerTagFieldNumber;
const int basicConsumeResponse::kBodyFieldNumber;
const int basicConsumeResponse::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

basicConsumeResponse::basicConsumeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.basicConsumeResponse)
}
basicConsumeResponse::basicConsumeResponse(const basicConsumeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  consumer_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.consumer_tag().size() > 0) {
    consumer_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_tag_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_properties()) {
    properties_ = new ::bitmq::BasicProperties(*from.properties_);
  } else {
    properties_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.basicConsumeResponse)
}

void basicConsumeResponse::SharedCtor() {
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_ = NULL;
  _cached_size_ = 0;
}

basicConsumeResponse::~basicConsumeResponse() {
  // @@protoc_insertion_point(destructor:bitmq.basicConsumeResponse)
  SharedDtor();
}

void basicConsumeResponse::SharedDtor() {
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete properties_;
  }
}

void basicConsumeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* basicConsumeResponse::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[14].descriptor;
}

const basicConsumeResponse& basicConsumeResponse::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

basicConsumeResponse* basicConsumeResponse::New(::google::protobuf::Arena* arena) const {
  basicConsumeResponse* n = new basicConsumeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void basicConsumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicConsumeResponse)
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && properties_ != NULL) {
    delete properties_;
  }
  properties_ = NULL;
}

bool basicConsumeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.basicConsumeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicConsumeResponse.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string consumer_tag = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumer_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consumer_tag().data(), this->consumer_tag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicConsumeResponse.consumer_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string body = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicConsumeResponse.body"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bitmq.BasicProperties properties = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.basicConsumeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.basicConsumeResponse)
  return false;
#undef DO_
}

void basicConsumeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.basicConsumeResponse)
  // string cid = 1;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeResponse.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cid(), output);
  }

  // string consumer_tag = 2;
  if (this->consumer_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_tag().data(), this->consumer_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeResponse.consumer_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->consumer_tag(), output);
  }

  // string body = 3;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeResponse.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->body(), output);
  }

  // .bitmq.BasicProperties properties = 4;
  if (this->has_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->properties_, output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.basicConsumeResponse)
}

::google::protobuf::uint8* basicConsumeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicConsumeResponse)
  // string cid = 1;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeResponse.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // string consumer_tag = 2;
  if (this->consumer_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_tag().data(), this->consumer_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeResponse.consumer_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->consumer_tag(), target);
  }

  // string body = 3;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeResponse.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->body(), target);
  }

  // .bitmq.BasicProperties properties = 4;
  if (this->has_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->properties_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicConsumeResponse)
  return target;
}

size_t basicConsumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicConsumeResponse)
  size_t total_size = 0;

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // string consumer_tag = 2;
  if (this->consumer_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->consumer_tag());
  }

  // string body = 3;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  // .bitmq.BasicProperties properties = 4;
  if (this->has_properties()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->properties_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void basicConsumeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.basicConsumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const basicConsumeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const basicConsumeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.basicConsumeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.basicConsumeResponse)
    MergeFrom(*source);
  }
}

void basicConsumeResponse::MergeFrom(const basicConsumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicConsumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.consumer_tag().size() > 0) {

    consumer_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_tag_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_properties()) {
    mutable_properties()->::bitmq::BasicProperties::MergeFrom(from.properties());
  }
}

void basicConsumeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.basicConsumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void basicConsumeResponse::CopyFrom(const basicConsumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicConsumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicConsumeResponse::IsInitialized() const {
  return true;
}

void basicConsumeResponse::Swap(basicConsumeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void basicConsumeResponse::InternalSwap(basicConsumeResponse* other) {
  cid_.Swap(&other->cid_);
  consumer_tag_.Swap(&other->consumer_tag_);
  body_.Swap(&other->body_);
  std::swap(properties_, other->properties_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata basicConsumeResponse::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// basicConsumeResponse

// string cid = 1;
void basicConsumeResponse::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicConsumeResponse::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeResponse.cid)
  return cid_.GetNoArena();
}
void basicConsumeResponse::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeResponse.cid)
}
#if LANG_CXX11
void basicConsumeResponse::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeResponse.cid)
}
#endif
void basicConsumeResponse::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeResponse.cid)
}
void basicConsumeResponse::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeResponse.cid)
}
::std::string* basicConsumeResponse::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeResponse.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicConsumeResponse::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeResponse.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicConsumeResponse::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeResponse.cid)
}

// string consumer_tag = 2;
void basicConsumeResponse::clear_consumer_tag() {
  consumer_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicConsumeResponse::consumer_tag() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeResponse.consumer_tag)
  return consumer_tag_.GetNoArena();
}
void basicConsumeResponse::set_consumer_tag(const ::std::string& value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeResponse.consumer_tag)
}
#if LANG_CXX11
void basicConsumeResponse::set_consumer_tag(::std::string&& value) {
  
  consumer_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeResponse.consumer_tag)
}
#endif
void basicConsumeResponse::set_consumer_tag(const char* value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeResponse.consumer_tag)
}
void basicConsumeResponse::set_consumer_tag(const char* value, size_t size) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeResponse.consumer_tag)
}
::std::string* basicConsumeResponse::mutable_consumer_tag() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeResponse.consumer_tag)
  return consumer_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicConsumeResponse::release_consumer_tag() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeResponse.consumer_tag)
  
  return consumer_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicConsumeResponse::set_allocated_consumer_tag(::std::string* consumer_tag) {
  if (consumer_tag != NULL) {
    
  } else {
    
  }
  consumer_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_tag);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeResponse.consumer_tag)
}

// string body = 3;
void basicConsumeResponse::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicConsumeResponse::body() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeResponse.body)
  return body_.GetNoArena();
}
void basicConsumeResponse::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeResponse.body)
}
#if LANG_CXX11
void basicConsumeResponse::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeResponse.body)
}
#endif
void basicConsumeResponse::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeResponse.body)
}
void basicConsumeResponse::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeResponse.body)
}
::std::string* basicConsumeResponse::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeResponse.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicConsumeResponse::release_body() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeResponse.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicConsumeResponse::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeResponse.body)
}

// .bitmq.BasicProperties properties = 4;
bool basicConsumeResponse::has_properties() const {
  return this != internal_default_instance() && properties_ != NULL;
}
void basicConsumeResponse::clear_properties() {
  if (GetArenaNoVirtual() == NULL && properties_ != NULL) delete properties_;
  properties_ = NULL;
}
const ::bitmq::BasicProperties& basicConsumeResponse::properties() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeResponse.properties)
  return properties_ != NULL ? *properties_
                         : *::bitmq::BasicProperties::internal_default_instance();
}
::bitmq::BasicProperties* basicConsumeResponse::mutable_properties() {
  
  if (properties_ == NULL) {
    properties_ = new ::bitmq::BasicProperties;
  }
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeResponse.properties)
  return properties_;
}
::bitmq::BasicProperties* basicConsumeResponse::release_properties() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeResponse.properties)
  
  ::bitmq::BasicProperties* temp = properties_;
  properties_ = NULL;
  return temp;
}
void basicConsumeResponse::set_allocated_properties(::bitmq::BasicProperties* properties) {
  delete properties_;
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeResponse.properties)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int basicCommonResponse::kRidFieldNumber;
const int basicCommonResponse::kCidFieldNumber;
const int basicCommonResponse::kOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

basicCommonResponse::basicCommonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mq_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitmq.basicCommonResponse)
}
basicCommonResponse::basicCommonResponse(const basicCommonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rid().size() > 0) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:bitmq.basicCommonResponse)
}

void basicCommonResponse::SharedCtor() {
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_ = false;
  _cached_size_ = 0;
}

basicCommonResponse::~basicCommonResponse() {
  // @@protoc_insertion_point(destructor:bitmq.basicCommonResponse)
  SharedDtor();
}

void basicCommonResponse::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void basicCommonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* basicCommonResponse::descriptor() {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[15].descriptor;
}

const basicCommonResponse& basicCommonResponse::default_instance() {
  protobuf_mq_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

basicCommonResponse* basicCommonResponse::New(::google::protobuf::Arena* arena) const {
  basicCommonResponse* n = new basicCommonResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void basicCommonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicCommonResponse)
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_ = false;
}

bool basicCommonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitmq.basicCommonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicCommonResponse.rid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitmq.basicCommonResponse.cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ok = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitmq.basicCommonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitmq.basicCommonResponse)
  return false;
#undef DO_
}

void basicCommonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitmq.basicCommonResponse)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCommonResponse.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCommonResponse.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cid(), output);
  }

  // bool ok = 3;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ok(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitmq.basicCommonResponse)
}

::google::protobuf::uint8* basicCommonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicCommonResponse)
  // string rid = 1;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCommonResponse.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCommonResponse.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // bool ok = 3;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ok(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicCommonResponse)
  return target;
}

size_t basicCommonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicCommonResponse)
  size_t total_size = 0;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cid());
  }

  // bool ok = 3;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void basicCommonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitmq.basicCommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const basicCommonResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const basicCommonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitmq.basicCommonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitmq.basicCommonResponse)
    MergeFrom(*source);
  }
}

void basicCommonResponse::MergeFrom(const basicCommonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicCommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
}

void basicCommonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitmq.basicCommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void basicCommonResponse::CopyFrom(const basicCommonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicCommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicCommonResponse::IsInitialized() const {
  return true;
}

void basicCommonResponse::Swap(basicCommonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void basicCommonResponse::InternalSwap(basicCommonResponse* other) {
  rid_.Swap(&other->rid_);
  cid_.Swap(&other->cid_);
  std::swap(ok_, other->ok_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata basicCommonResponse::GetMetadata() const {
  protobuf_mq_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mq_5fproto_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// basicCommonResponse

// string rid = 1;
void basicCommonResponse::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicCommonResponse::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCommonResponse.rid)
  return rid_.GetNoArena();
}
void basicCommonResponse::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCommonResponse.rid)
}
#if LANG_CXX11
void basicCommonResponse::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCommonResponse.rid)
}
#endif
void basicCommonResponse::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCommonResponse.rid)
}
void basicCommonResponse::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCommonResponse.rid)
}
::std::string* basicCommonResponse::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCommonResponse.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicCommonResponse::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.basicCommonResponse.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicCommonResponse::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCommonResponse.rid)
}

// string cid = 2;
void basicCommonResponse::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& basicCommonResponse::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCommonResponse.cid)
  return cid_.GetNoArena();
}
void basicCommonResponse::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCommonResponse.cid)
}
#if LANG_CXX11
void basicCommonResponse::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCommonResponse.cid)
}
#endif
void basicCommonResponse::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCommonResponse.cid)
}
void basicCommonResponse::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCommonResponse.cid)
}
::std::string* basicCommonResponse::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCommonResponse.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* basicCommonResponse::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicCommonResponse.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void basicCommonResponse::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCommonResponse.cid)
}

// bool ok = 3;
void basicCommonResponse::clear_ok() {
  ok_ = false;
}
bool basicCommonResponse::ok() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCommonResponse.ok)
  return ok_;
}
void basicCommonResponse::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:bitmq.basicCommonResponse.ok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bitmq

// @@protoc_insertion_point(global_scope)
