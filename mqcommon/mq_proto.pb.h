// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mq_proto.proto

#ifndef PROTOBUF_mq_5fproto_2eproto__INCLUDED
#define PROTOBUF_mq_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "mq_msg.pb.h"
// @@protoc_insertion_point(includes)
namespace bitmq {
class BasicProperties;
class BasicPropertiesDefaultTypeInternal;
extern BasicPropertiesDefaultTypeInternal _BasicProperties_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_Payload;
class Message_PayloadDefaultTypeInternal;
extern Message_PayloadDefaultTypeInternal _Message_Payload_default_instance_;
class basicAckRequest;
class basicAckRequestDefaultTypeInternal;
extern basicAckRequestDefaultTypeInternal _basicAckRequest_default_instance_;
class basicCancelRequest;
class basicCancelRequestDefaultTypeInternal;
extern basicCancelRequestDefaultTypeInternal _basicCancelRequest_default_instance_;
class basicCommonResponse;
class basicCommonResponseDefaultTypeInternal;
extern basicCommonResponseDefaultTypeInternal _basicCommonResponse_default_instance_;
class basicConsumeRequest;
class basicConsumeRequestDefaultTypeInternal;
extern basicConsumeRequestDefaultTypeInternal _basicConsumeRequest_default_instance_;
class basicConsumeResponse;
class basicConsumeResponseDefaultTypeInternal;
extern basicConsumeResponseDefaultTypeInternal _basicConsumeResponse_default_instance_;
class basicPublishRequest;
class basicPublishRequestDefaultTypeInternal;
extern basicPublishRequestDefaultTypeInternal _basicPublishRequest_default_instance_;
class closeChannelRequest;
class closeChannelRequestDefaultTypeInternal;
extern closeChannelRequestDefaultTypeInternal _closeChannelRequest_default_instance_;
class declareExchangeRequest;
class declareExchangeRequestDefaultTypeInternal;
extern declareExchangeRequestDefaultTypeInternal _declareExchangeRequest_default_instance_;
class declareQueueRequest;
class declareQueueRequestDefaultTypeInternal;
extern declareQueueRequestDefaultTypeInternal _declareQueueRequest_default_instance_;
class deleteExchangeRequest;
class deleteExchangeRequestDefaultTypeInternal;
extern deleteExchangeRequestDefaultTypeInternal _deleteExchangeRequest_default_instance_;
class deleteQueueRequest;
class deleteQueueRequestDefaultTypeInternal;
extern deleteQueueRequestDefaultTypeInternal _deleteQueueRequest_default_instance_;
class openChannelRequest;
class openChannelRequestDefaultTypeInternal;
extern openChannelRequestDefaultTypeInternal _openChannelRequest_default_instance_;
class queueBindRequest;
class queueBindRequestDefaultTypeInternal;
extern queueBindRequestDefaultTypeInternal _queueBindRequest_default_instance_;
class queueUnBindRequest;
class queueUnBindRequestDefaultTypeInternal;
extern queueUnBindRequestDefaultTypeInternal _queueUnBindRequest_default_instance_;
}  // namespace bitmq

namespace bitmq {

namespace protobuf_mq_5fproto_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mq_5fproto_2eproto

// ===================================================================

class openChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.openChannelRequest) */ {
 public:
  openChannelRequest();
  virtual ~openChannelRequest();

  openChannelRequest(const openChannelRequest& from);

  inline openChannelRequest& operator=(const openChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const openChannelRequest& default_instance();

  static inline const openChannelRequest* internal_default_instance() {
    return reinterpret_cast<const openChannelRequest*>(
               &_openChannelRequest_default_instance_);
  }

  void Swap(openChannelRequest* other);

  // implements Message ----------------------------------------------

  inline openChannelRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  openChannelRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const openChannelRequest& from);
  void MergeFrom(const openChannelRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(openChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // @@protoc_insertion_point(class_scope:bitmq.openChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class closeChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.closeChannelRequest) */ {
 public:
  closeChannelRequest();
  virtual ~closeChannelRequest();

  closeChannelRequest(const closeChannelRequest& from);

  inline closeChannelRequest& operator=(const closeChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const closeChannelRequest& default_instance();

  static inline const closeChannelRequest* internal_default_instance() {
    return reinterpret_cast<const closeChannelRequest*>(
               &_closeChannelRequest_default_instance_);
  }

  void Swap(closeChannelRequest* other);

  // implements Message ----------------------------------------------

  inline closeChannelRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  closeChannelRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const closeChannelRequest& from);
  void MergeFrom(const closeChannelRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(closeChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // @@protoc_insertion_point(class_scope:bitmq.closeChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class declareExchangeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.declareExchangeRequest) */ {
 public:
  declareExchangeRequest();
  virtual ~declareExchangeRequest();

  declareExchangeRequest(const declareExchangeRequest& from);

  inline declareExchangeRequest& operator=(const declareExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const declareExchangeRequest& default_instance();

  static inline const declareExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const declareExchangeRequest*>(
               &_declareExchangeRequest_default_instance_);
  }

  void Swap(declareExchangeRequest* other);

  // implements Message ----------------------------------------------

  inline declareExchangeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  declareExchangeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const declareExchangeRequest& from);
  void MergeFrom(const declareExchangeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(declareExchangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> args = 7;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      args() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_args();

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // string exchange_name = 3;
  void clear_exchange_name();
  static const int kExchangeNameFieldNumber = 3;
  const ::std::string& exchange_name() const;
  void set_exchange_name(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_name(::std::string&& value);
  #endif
  void set_exchange_name(const char* value);
  void set_exchange_name(const char* value, size_t size);
  ::std::string* mutable_exchange_name();
  ::std::string* release_exchange_name();
  void set_allocated_exchange_name(::std::string* exchange_name);

  // .bitmq.ExchangeType exchange_type = 4;
  void clear_exchange_type();
  static const int kExchangeTypeFieldNumber = 4;
  ::bitmq::ExchangeType exchange_type() const;
  void set_exchange_type(::bitmq::ExchangeType value);

  // bool durable = 5;
  void clear_durable();
  static const int kDurableFieldNumber = 5;
  bool durable() const;
  void set_durable(bool value);

  // bool auto_delete = 6;
  void clear_auto_delete();
  static const int kAutoDeleteFieldNumber = 6;
  bool auto_delete() const;
  void set_auto_delete(bool value);

  // @@protoc_insertion_point(class_scope:bitmq.declareExchangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      declareExchangeRequest_ArgsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > args_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr exchange_name_;
  int exchange_type_;
  bool durable_;
  bool auto_delete_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class deleteExchangeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.deleteExchangeRequest) */ {
 public:
  deleteExchangeRequest();
  virtual ~deleteExchangeRequest();

  deleteExchangeRequest(const deleteExchangeRequest& from);

  inline deleteExchangeRequest& operator=(const deleteExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteExchangeRequest& default_instance();

  static inline const deleteExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const deleteExchangeRequest*>(
               &_deleteExchangeRequest_default_instance_);
  }

  void Swap(deleteExchangeRequest* other);

  // implements Message ----------------------------------------------

  inline deleteExchangeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  deleteExchangeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const deleteExchangeRequest& from);
  void MergeFrom(const deleteExchangeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(deleteExchangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // string exchange_name = 3;
  void clear_exchange_name();
  static const int kExchangeNameFieldNumber = 3;
  const ::std::string& exchange_name() const;
  void set_exchange_name(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_name(::std::string&& value);
  #endif
  void set_exchange_name(const char* value);
  void set_exchange_name(const char* value, size_t size);
  ::std::string* mutable_exchange_name();
  ::std::string* release_exchange_name();
  void set_allocated_exchange_name(::std::string* exchange_name);

  // @@protoc_insertion_point(class_scope:bitmq.deleteExchangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr exchange_name_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class declareQueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.declareQueueRequest) */ {
 public:
  declareQueueRequest();
  virtual ~declareQueueRequest();

  declareQueueRequest(const declareQueueRequest& from);

  inline declareQueueRequest& operator=(const declareQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const declareQueueRequest& default_instance();

  static inline const declareQueueRequest* internal_default_instance() {
    return reinterpret_cast<const declareQueueRequest*>(
               &_declareQueueRequest_default_instance_);
  }

  void Swap(declareQueueRequest* other);

  // implements Message ----------------------------------------------

  inline declareQueueRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  declareQueueRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const declareQueueRequest& from);
  void MergeFrom(const declareQueueRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(declareQueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> args = 7;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      args() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_args();

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // string queue_name = 3;
  void clear_queue_name();
  static const int kQueueNameFieldNumber = 3;
  const ::std::string& queue_name() const;
  void set_queue_name(const ::std::string& value);
  #if LANG_CXX11
  void set_queue_name(::std::string&& value);
  #endif
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  ::std::string* mutable_queue_name();
  ::std::string* release_queue_name();
  void set_allocated_queue_name(::std::string* queue_name);

  // bool exclusive = 4;
  void clear_exclusive();
  static const int kExclusiveFieldNumber = 4;
  bool exclusive() const;
  void set_exclusive(bool value);

  // bool durable = 5;
  void clear_durable();
  static const int kDurableFieldNumber = 5;
  bool durable() const;
  void set_durable(bool value);

  // bool auto_delete = 6;
  void clear_auto_delete();
  static const int kAutoDeleteFieldNumber = 6;
  bool auto_delete() const;
  void set_auto_delete(bool value);

  // @@protoc_insertion_point(class_scope:bitmq.declareQueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      declareQueueRequest_ArgsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > args_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr queue_name_;
  bool exclusive_;
  bool durable_;
  bool auto_delete_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class deleteQueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.deleteQueueRequest) */ {
 public:
  deleteQueueRequest();
  virtual ~deleteQueueRequest();

  deleteQueueRequest(const deleteQueueRequest& from);

  inline deleteQueueRequest& operator=(const deleteQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteQueueRequest& default_instance();

  static inline const deleteQueueRequest* internal_default_instance() {
    return reinterpret_cast<const deleteQueueRequest*>(
               &_deleteQueueRequest_default_instance_);
  }

  void Swap(deleteQueueRequest* other);

  // implements Message ----------------------------------------------

  inline deleteQueueRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  deleteQueueRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const deleteQueueRequest& from);
  void MergeFrom(const deleteQueueRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(deleteQueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // string queue_name = 3;
  void clear_queue_name();
  static const int kQueueNameFieldNumber = 3;
  const ::std::string& queue_name() const;
  void set_queue_name(const ::std::string& value);
  #if LANG_CXX11
  void set_queue_name(::std::string&& value);
  #endif
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  ::std::string* mutable_queue_name();
  ::std::string* release_queue_name();
  void set_allocated_queue_name(::std::string* queue_name);

  // @@protoc_insertion_point(class_scope:bitmq.deleteQueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr queue_name_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class queueBindRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.queueBindRequest) */ {
 public:
  queueBindRequest();
  virtual ~queueBindRequest();

  queueBindRequest(const queueBindRequest& from);

  inline queueBindRequest& operator=(const queueBindRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const queueBindRequest& default_instance();

  static inline const queueBindRequest* internal_default_instance() {
    return reinterpret_cast<const queueBindRequest*>(
               &_queueBindRequest_default_instance_);
  }

  void Swap(queueBindRequest* other);

  // implements Message ----------------------------------------------

  inline queueBindRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  queueBindRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const queueBindRequest& from);
  void MergeFrom(const queueBindRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(queueBindRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // string exchange_name = 3;
  void clear_exchange_name();
  static const int kExchangeNameFieldNumber = 3;
  const ::std::string& exchange_name() const;
  void set_exchange_name(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_name(::std::string&& value);
  #endif
  void set_exchange_name(const char* value);
  void set_exchange_name(const char* value, size_t size);
  ::std::string* mutable_exchange_name();
  ::std::string* release_exchange_name();
  void set_allocated_exchange_name(::std::string* exchange_name);

  // string queue_name = 4;
  void clear_queue_name();
  static const int kQueueNameFieldNumber = 4;
  const ::std::string& queue_name() const;
  void set_queue_name(const ::std::string& value);
  #if LANG_CXX11
  void set_queue_name(::std::string&& value);
  #endif
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  ::std::string* mutable_queue_name();
  ::std::string* release_queue_name();
  void set_allocated_queue_name(::std::string* queue_name);

  // string binding_key = 5;
  void clear_binding_key();
  static const int kBindingKeyFieldNumber = 5;
  const ::std::string& binding_key() const;
  void set_binding_key(const ::std::string& value);
  #if LANG_CXX11
  void set_binding_key(::std::string&& value);
  #endif
  void set_binding_key(const char* value);
  void set_binding_key(const char* value, size_t size);
  ::std::string* mutable_binding_key();
  ::std::string* release_binding_key();
  void set_allocated_binding_key(::std::string* binding_key);

  // @@protoc_insertion_point(class_scope:bitmq.queueBindRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr exchange_name_;
  ::google::protobuf::internal::ArenaStringPtr queue_name_;
  ::google::protobuf::internal::ArenaStringPtr binding_key_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class queueUnBindRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.queueUnBindRequest) */ {
 public:
  queueUnBindRequest();
  virtual ~queueUnBindRequest();

  queueUnBindRequest(const queueUnBindRequest& from);

  inline queueUnBindRequest& operator=(const queueUnBindRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const queueUnBindRequest& default_instance();

  static inline const queueUnBindRequest* internal_default_instance() {
    return reinterpret_cast<const queueUnBindRequest*>(
               &_queueUnBindRequest_default_instance_);
  }

  void Swap(queueUnBindRequest* other);

  // implements Message ----------------------------------------------

  inline queueUnBindRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  queueUnBindRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const queueUnBindRequest& from);
  void MergeFrom(const queueUnBindRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(queueUnBindRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // string exchange_name = 3;
  void clear_exchange_name();
  static const int kExchangeNameFieldNumber = 3;
  const ::std::string& exchange_name() const;
  void set_exchange_name(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_name(::std::string&& value);
  #endif
  void set_exchange_name(const char* value);
  void set_exchange_name(const char* value, size_t size);
  ::std::string* mutable_exchange_name();
  ::std::string* release_exchange_name();
  void set_allocated_exchange_name(::std::string* exchange_name);

  // string queue_name = 4;
  void clear_queue_name();
  static const int kQueueNameFieldNumber = 4;
  const ::std::string& queue_name() const;
  void set_queue_name(const ::std::string& value);
  #if LANG_CXX11
  void set_queue_name(::std::string&& value);
  #endif
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  ::std::string* mutable_queue_name();
  ::std::string* release_queue_name();
  void set_allocated_queue_name(::std::string* queue_name);

  // @@protoc_insertion_point(class_scope:bitmq.queueUnBindRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr exchange_name_;
  ::google::protobuf::internal::ArenaStringPtr queue_name_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class basicPublishRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.basicPublishRequest) */ {
 public:
  basicPublishRequest();
  virtual ~basicPublishRequest();

  basicPublishRequest(const basicPublishRequest& from);

  inline basicPublishRequest& operator=(const basicPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const basicPublishRequest& default_instance();

  static inline const basicPublishRequest* internal_default_instance() {
    return reinterpret_cast<const basicPublishRequest*>(
               &_basicPublishRequest_default_instance_);
  }

  void Swap(basicPublishRequest* other);

  // implements Message ----------------------------------------------

  inline basicPublishRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  basicPublishRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const basicPublishRequest& from);
  void MergeFrom(const basicPublishRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(basicPublishRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // string exchange_name = 3;
  void clear_exchange_name();
  static const int kExchangeNameFieldNumber = 3;
  const ::std::string& exchange_name() const;
  void set_exchange_name(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_name(::std::string&& value);
  #endif
  void set_exchange_name(const char* value);
  void set_exchange_name(const char* value, size_t size);
  ::std::string* mutable_exchange_name();
  ::std::string* release_exchange_name();
  void set_allocated_exchange_name(::std::string* exchange_name);

  // string body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // .bitmq.BasicProperties properties = 5;
  bool has_properties() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 5;
  const ::bitmq::BasicProperties& properties() const;
  ::bitmq::BasicProperties* mutable_properties();
  ::bitmq::BasicProperties* release_properties();
  void set_allocated_properties(::bitmq::BasicProperties* properties);

  // @@protoc_insertion_point(class_scope:bitmq.basicPublishRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr exchange_name_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::bitmq::BasicProperties* properties_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class basicAckRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.basicAckRequest) */ {
 public:
  basicAckRequest();
  virtual ~basicAckRequest();

  basicAckRequest(const basicAckRequest& from);

  inline basicAckRequest& operator=(const basicAckRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const basicAckRequest& default_instance();

  static inline const basicAckRequest* internal_default_instance() {
    return reinterpret_cast<const basicAckRequest*>(
               &_basicAckRequest_default_instance_);
  }

  void Swap(basicAckRequest* other);

  // implements Message ----------------------------------------------

  inline basicAckRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  basicAckRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const basicAckRequest& from);
  void MergeFrom(const basicAckRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(basicAckRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // string queue_name = 3;
  void clear_queue_name();
  static const int kQueueNameFieldNumber = 3;
  const ::std::string& queue_name() const;
  void set_queue_name(const ::std::string& value);
  #if LANG_CXX11
  void set_queue_name(::std::string&& value);
  #endif
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  ::std::string* mutable_queue_name();
  ::std::string* release_queue_name();
  void set_allocated_queue_name(::std::string* queue_name);

  // string message_id = 4;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 4;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // @@protoc_insertion_point(class_scope:bitmq.basicAckRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr queue_name_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class basicConsumeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.basicConsumeRequest) */ {
 public:
  basicConsumeRequest();
  virtual ~basicConsumeRequest();

  basicConsumeRequest(const basicConsumeRequest& from);

  inline basicConsumeRequest& operator=(const basicConsumeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const basicConsumeRequest& default_instance();

  static inline const basicConsumeRequest* internal_default_instance() {
    return reinterpret_cast<const basicConsumeRequest*>(
               &_basicConsumeRequest_default_instance_);
  }

  void Swap(basicConsumeRequest* other);

  // implements Message ----------------------------------------------

  inline basicConsumeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  basicConsumeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const basicConsumeRequest& from);
  void MergeFrom(const basicConsumeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(basicConsumeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // string consumer_tag = 3;
  void clear_consumer_tag();
  static const int kConsumerTagFieldNumber = 3;
  const ::std::string& consumer_tag() const;
  void set_consumer_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_consumer_tag(::std::string&& value);
  #endif
  void set_consumer_tag(const char* value);
  void set_consumer_tag(const char* value, size_t size);
  ::std::string* mutable_consumer_tag();
  ::std::string* release_consumer_tag();
  void set_allocated_consumer_tag(::std::string* consumer_tag);

  // string queue_name = 4;
  void clear_queue_name();
  static const int kQueueNameFieldNumber = 4;
  const ::std::string& queue_name() const;
  void set_queue_name(const ::std::string& value);
  #if LANG_CXX11
  void set_queue_name(::std::string&& value);
  #endif
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  ::std::string* mutable_queue_name();
  ::std::string* release_queue_name();
  void set_allocated_queue_name(::std::string* queue_name);

  // bool auto_ack = 5;
  void clear_auto_ack();
  static const int kAutoAckFieldNumber = 5;
  bool auto_ack() const;
  void set_auto_ack(bool value);

  // @@protoc_insertion_point(class_scope:bitmq.basicConsumeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr consumer_tag_;
  ::google::protobuf::internal::ArenaStringPtr queue_name_;
  bool auto_ack_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class basicCancelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.basicCancelRequest) */ {
 public:
  basicCancelRequest();
  virtual ~basicCancelRequest();

  basicCancelRequest(const basicCancelRequest& from);

  inline basicCancelRequest& operator=(const basicCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const basicCancelRequest& default_instance();

  static inline const basicCancelRequest* internal_default_instance() {
    return reinterpret_cast<const basicCancelRequest*>(
               &_basicCancelRequest_default_instance_);
  }

  void Swap(basicCancelRequest* other);

  // implements Message ----------------------------------------------

  inline basicCancelRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  basicCancelRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const basicCancelRequest& from);
  void MergeFrom(const basicCancelRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(basicCancelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // string consumer_tag = 3;
  void clear_consumer_tag();
  static const int kConsumerTagFieldNumber = 3;
  const ::std::string& consumer_tag() const;
  void set_consumer_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_consumer_tag(::std::string&& value);
  #endif
  void set_consumer_tag(const char* value);
  void set_consumer_tag(const char* value, size_t size);
  ::std::string* mutable_consumer_tag();
  ::std::string* release_consumer_tag();
  void set_allocated_consumer_tag(::std::string* consumer_tag);

  // string queue_name = 4;
  void clear_queue_name();
  static const int kQueueNameFieldNumber = 4;
  const ::std::string& queue_name() const;
  void set_queue_name(const ::std::string& value);
  #if LANG_CXX11
  void set_queue_name(::std::string&& value);
  #endif
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  ::std::string* mutable_queue_name();
  ::std::string* release_queue_name();
  void set_allocated_queue_name(::std::string* queue_name);

  // @@protoc_insertion_point(class_scope:bitmq.basicCancelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr consumer_tag_;
  ::google::protobuf::internal::ArenaStringPtr queue_name_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class basicConsumeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.basicConsumeResponse) */ {
 public:
  basicConsumeResponse();
  virtual ~basicConsumeResponse();

  basicConsumeResponse(const basicConsumeResponse& from);

  inline basicConsumeResponse& operator=(const basicConsumeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const basicConsumeResponse& default_instance();

  static inline const basicConsumeResponse* internal_default_instance() {
    return reinterpret_cast<const basicConsumeResponse*>(
               &_basicConsumeResponse_default_instance_);
  }

  void Swap(basicConsumeResponse* other);

  // implements Message ----------------------------------------------

  inline basicConsumeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  basicConsumeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const basicConsumeResponse& from);
  void MergeFrom(const basicConsumeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(basicConsumeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cid = 1;
  void clear_cid();
  static const int kCidFieldNumber = 1;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // string consumer_tag = 2;
  void clear_consumer_tag();
  static const int kConsumerTagFieldNumber = 2;
  const ::std::string& consumer_tag() const;
  void set_consumer_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_consumer_tag(::std::string&& value);
  #endif
  void set_consumer_tag(const char* value);
  void set_consumer_tag(const char* value, size_t size);
  ::std::string* mutable_consumer_tag();
  ::std::string* release_consumer_tag();
  void set_allocated_consumer_tag(::std::string* consumer_tag);

  // string body = 3;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // .bitmq.BasicProperties properties = 4;
  bool has_properties() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  const ::bitmq::BasicProperties& properties() const;
  ::bitmq::BasicProperties* mutable_properties();
  ::bitmq::BasicProperties* release_properties();
  void set_allocated_properties(::bitmq::BasicProperties* properties);

  // @@protoc_insertion_point(class_scope:bitmq.basicConsumeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr consumer_tag_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::bitmq::BasicProperties* properties_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class basicCommonResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitmq.basicCommonResponse) */ {
 public:
  basicCommonResponse();
  virtual ~basicCommonResponse();

  basicCommonResponse(const basicCommonResponse& from);

  inline basicCommonResponse& operator=(const basicCommonResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const basicCommonResponse& default_instance();

  static inline const basicCommonResponse* internal_default_instance() {
    return reinterpret_cast<const basicCommonResponse*>(
               &_basicCommonResponse_default_instance_);
  }

  void Swap(basicCommonResponse* other);

  // implements Message ----------------------------------------------

  inline basicCommonResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  basicCommonResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const basicCommonResponse& from);
  void MergeFrom(const basicCommonResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(basicCommonResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // string cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // bool ok = 3;
  void clear_ok();
  static const int kOkFieldNumber = 3;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:bitmq.basicCommonResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  bool ok_;
  mutable int _cached_size_;
  friend struct  protobuf_mq_5fproto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// openChannelRequest

// string rid = 1;
inline void openChannelRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& openChannelRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.openChannelRequest.rid)
  return rid_.GetNoArena();
}
inline void openChannelRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.openChannelRequest.rid)
}
#if LANG_CXX11
inline void openChannelRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.openChannelRequest.rid)
}
#endif
inline void openChannelRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.openChannelRequest.rid)
}
inline void openChannelRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.openChannelRequest.rid)
}
inline ::std::string* openChannelRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.openChannelRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* openChannelRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.openChannelRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void openChannelRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.openChannelRequest.rid)
}

// string cid = 2;
inline void openChannelRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& openChannelRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.openChannelRequest.cid)
  return cid_.GetNoArena();
}
inline void openChannelRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.openChannelRequest.cid)
}
#if LANG_CXX11
inline void openChannelRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.openChannelRequest.cid)
}
#endif
inline void openChannelRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.openChannelRequest.cid)
}
inline void openChannelRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.openChannelRequest.cid)
}
inline ::std::string* openChannelRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.openChannelRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* openChannelRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.openChannelRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void openChannelRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.openChannelRequest.cid)
}

// -------------------------------------------------------------------

// closeChannelRequest

// string rid = 1;
inline void closeChannelRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& closeChannelRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.closeChannelRequest.rid)
  return rid_.GetNoArena();
}
inline void closeChannelRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.closeChannelRequest.rid)
}
#if LANG_CXX11
inline void closeChannelRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.closeChannelRequest.rid)
}
#endif
inline void closeChannelRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.closeChannelRequest.rid)
}
inline void closeChannelRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.closeChannelRequest.rid)
}
inline ::std::string* closeChannelRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.closeChannelRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* closeChannelRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.closeChannelRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void closeChannelRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.closeChannelRequest.rid)
}

// string cid = 2;
inline void closeChannelRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& closeChannelRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.closeChannelRequest.cid)
  return cid_.GetNoArena();
}
inline void closeChannelRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.closeChannelRequest.cid)
}
#if LANG_CXX11
inline void closeChannelRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.closeChannelRequest.cid)
}
#endif
inline void closeChannelRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.closeChannelRequest.cid)
}
inline void closeChannelRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.closeChannelRequest.cid)
}
inline ::std::string* closeChannelRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.closeChannelRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* closeChannelRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.closeChannelRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void closeChannelRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.closeChannelRequest.cid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// declareExchangeRequest

// string rid = 1;
inline void declareExchangeRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& declareExchangeRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.rid)
  return rid_.GetNoArena();
}
inline void declareExchangeRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.rid)
}
#if LANG_CXX11
inline void declareExchangeRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareExchangeRequest.rid)
}
#endif
inline void declareExchangeRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareExchangeRequest.rid)
}
inline void declareExchangeRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareExchangeRequest.rid)
}
inline ::std::string* declareExchangeRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareExchangeRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* declareExchangeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.declareExchangeRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void declareExchangeRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareExchangeRequest.rid)
}

// string cid = 2;
inline void declareExchangeRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& declareExchangeRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.cid)
  return cid_.GetNoArena();
}
inline void declareExchangeRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.cid)
}
#if LANG_CXX11
inline void declareExchangeRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareExchangeRequest.cid)
}
#endif
inline void declareExchangeRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareExchangeRequest.cid)
}
inline void declareExchangeRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareExchangeRequest.cid)
}
inline ::std::string* declareExchangeRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareExchangeRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* declareExchangeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.declareExchangeRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void declareExchangeRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareExchangeRequest.cid)
}

// string exchange_name = 3;
inline void declareExchangeRequest::clear_exchange_name() {
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& declareExchangeRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.exchange_name)
  return exchange_name_.GetNoArena();
}
inline void declareExchangeRequest::set_exchange_name(const ::std::string& value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.exchange_name)
}
#if LANG_CXX11
inline void declareExchangeRequest::set_exchange_name(::std::string&& value) {
  
  exchange_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareExchangeRequest.exchange_name)
}
#endif
inline void declareExchangeRequest::set_exchange_name(const char* value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareExchangeRequest.exchange_name)
}
inline void declareExchangeRequest::set_exchange_name(const char* value, size_t size) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareExchangeRequest.exchange_name)
}
inline ::std::string* declareExchangeRequest::mutable_exchange_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareExchangeRequest.exchange_name)
  return exchange_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* declareExchangeRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:bitmq.declareExchangeRequest.exchange_name)
  
  return exchange_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void declareExchangeRequest::set_allocated_exchange_name(::std::string* exchange_name) {
  if (exchange_name != NULL) {
    
  } else {
    
  }
  exchange_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareExchangeRequest.exchange_name)
}

// .bitmq.ExchangeType exchange_type = 4;
inline void declareExchangeRequest::clear_exchange_type() {
  exchange_type_ = 0;
}
inline ::bitmq::ExchangeType declareExchangeRequest::exchange_type() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.exchange_type)
  return static_cast< ::bitmq::ExchangeType >(exchange_type_);
}
inline void declareExchangeRequest::set_exchange_type(::bitmq::ExchangeType value) {
  
  exchange_type_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.exchange_type)
}

// bool durable = 5;
inline void declareExchangeRequest::clear_durable() {
  durable_ = false;
}
inline bool declareExchangeRequest::durable() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.durable)
  return durable_;
}
inline void declareExchangeRequest::set_durable(bool value) {
  
  durable_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.durable)
}

// bool auto_delete = 6;
inline void declareExchangeRequest::clear_auto_delete() {
  auto_delete_ = false;
}
inline bool declareExchangeRequest::auto_delete() const {
  // @@protoc_insertion_point(field_get:bitmq.declareExchangeRequest.auto_delete)
  return auto_delete_;
}
inline void declareExchangeRequest::set_auto_delete(bool value) {
  
  auto_delete_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareExchangeRequest.auto_delete)
}

// map<string, string> args = 7;
inline int declareExchangeRequest::args_size() const {
  return args_.size();
}
inline void declareExchangeRequest::clear_args() {
  args_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
declareExchangeRequest::args() const {
  // @@protoc_insertion_point(field_map:bitmq.declareExchangeRequest.args)
  return args_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
declareExchangeRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:bitmq.declareExchangeRequest.args)
  return args_.MutableMap();
}

// -------------------------------------------------------------------

// deleteExchangeRequest

// string rid = 1;
inline void deleteExchangeRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deleteExchangeRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteExchangeRequest.rid)
  return rid_.GetNoArena();
}
inline void deleteExchangeRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteExchangeRequest.rid)
}
#if LANG_CXX11
inline void deleteExchangeRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteExchangeRequest.rid)
}
#endif
inline void deleteExchangeRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteExchangeRequest.rid)
}
inline void deleteExchangeRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteExchangeRequest.rid)
}
inline ::std::string* deleteExchangeRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteExchangeRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deleteExchangeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.deleteExchangeRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deleteExchangeRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteExchangeRequest.rid)
}

// string cid = 2;
inline void deleteExchangeRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deleteExchangeRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteExchangeRequest.cid)
  return cid_.GetNoArena();
}
inline void deleteExchangeRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteExchangeRequest.cid)
}
#if LANG_CXX11
inline void deleteExchangeRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteExchangeRequest.cid)
}
#endif
inline void deleteExchangeRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteExchangeRequest.cid)
}
inline void deleteExchangeRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteExchangeRequest.cid)
}
inline ::std::string* deleteExchangeRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteExchangeRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deleteExchangeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.deleteExchangeRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deleteExchangeRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteExchangeRequest.cid)
}

// string exchange_name = 3;
inline void deleteExchangeRequest::clear_exchange_name() {
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deleteExchangeRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteExchangeRequest.exchange_name)
  return exchange_name_.GetNoArena();
}
inline void deleteExchangeRequest::set_exchange_name(const ::std::string& value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteExchangeRequest.exchange_name)
}
#if LANG_CXX11
inline void deleteExchangeRequest::set_exchange_name(::std::string&& value) {
  
  exchange_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteExchangeRequest.exchange_name)
}
#endif
inline void deleteExchangeRequest::set_exchange_name(const char* value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteExchangeRequest.exchange_name)
}
inline void deleteExchangeRequest::set_exchange_name(const char* value, size_t size) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteExchangeRequest.exchange_name)
}
inline ::std::string* deleteExchangeRequest::mutable_exchange_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteExchangeRequest.exchange_name)
  return exchange_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deleteExchangeRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:bitmq.deleteExchangeRequest.exchange_name)
  
  return exchange_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deleteExchangeRequest::set_allocated_exchange_name(::std::string* exchange_name) {
  if (exchange_name != NULL) {
    
  } else {
    
  }
  exchange_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteExchangeRequest.exchange_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// declareQueueRequest

// string rid = 1;
inline void declareQueueRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& declareQueueRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.rid)
  return rid_.GetNoArena();
}
inline void declareQueueRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.rid)
}
#if LANG_CXX11
inline void declareQueueRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareQueueRequest.rid)
}
#endif
inline void declareQueueRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareQueueRequest.rid)
}
inline void declareQueueRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareQueueRequest.rid)
}
inline ::std::string* declareQueueRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareQueueRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* declareQueueRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.declareQueueRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void declareQueueRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareQueueRequest.rid)
}

// string cid = 2;
inline void declareQueueRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& declareQueueRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.cid)
  return cid_.GetNoArena();
}
inline void declareQueueRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.cid)
}
#if LANG_CXX11
inline void declareQueueRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareQueueRequest.cid)
}
#endif
inline void declareQueueRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareQueueRequest.cid)
}
inline void declareQueueRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareQueueRequest.cid)
}
inline ::std::string* declareQueueRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareQueueRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* declareQueueRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.declareQueueRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void declareQueueRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareQueueRequest.cid)
}

// string queue_name = 3;
inline void declareQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& declareQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.queue_name)
  return queue_name_.GetNoArena();
}
inline void declareQueueRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.queue_name)
}
#if LANG_CXX11
inline void declareQueueRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.declareQueueRequest.queue_name)
}
#endif
inline void declareQueueRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.declareQueueRequest.queue_name)
}
inline void declareQueueRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.declareQueueRequest.queue_name)
}
inline ::std::string* declareQueueRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.declareQueueRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* declareQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.declareQueueRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void declareQueueRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.declareQueueRequest.queue_name)
}

// bool exclusive = 4;
inline void declareQueueRequest::clear_exclusive() {
  exclusive_ = false;
}
inline bool declareQueueRequest::exclusive() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.exclusive)
  return exclusive_;
}
inline void declareQueueRequest::set_exclusive(bool value) {
  
  exclusive_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.exclusive)
}

// bool durable = 5;
inline void declareQueueRequest::clear_durable() {
  durable_ = false;
}
inline bool declareQueueRequest::durable() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.durable)
  return durable_;
}
inline void declareQueueRequest::set_durable(bool value) {
  
  durable_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.durable)
}

// bool auto_delete = 6;
inline void declareQueueRequest::clear_auto_delete() {
  auto_delete_ = false;
}
inline bool declareQueueRequest::auto_delete() const {
  // @@protoc_insertion_point(field_get:bitmq.declareQueueRequest.auto_delete)
  return auto_delete_;
}
inline void declareQueueRequest::set_auto_delete(bool value) {
  
  auto_delete_ = value;
  // @@protoc_insertion_point(field_set:bitmq.declareQueueRequest.auto_delete)
}

// map<string, string> args = 7;
inline int declareQueueRequest::args_size() const {
  return args_.size();
}
inline void declareQueueRequest::clear_args() {
  args_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
declareQueueRequest::args() const {
  // @@protoc_insertion_point(field_map:bitmq.declareQueueRequest.args)
  return args_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
declareQueueRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:bitmq.declareQueueRequest.args)
  return args_.MutableMap();
}

// -------------------------------------------------------------------

// deleteQueueRequest

// string rid = 1;
inline void deleteQueueRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deleteQueueRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteQueueRequest.rid)
  return rid_.GetNoArena();
}
inline void deleteQueueRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteQueueRequest.rid)
}
#if LANG_CXX11
inline void deleteQueueRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteQueueRequest.rid)
}
#endif
inline void deleteQueueRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteQueueRequest.rid)
}
inline void deleteQueueRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteQueueRequest.rid)
}
inline ::std::string* deleteQueueRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteQueueRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deleteQueueRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.deleteQueueRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deleteQueueRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteQueueRequest.rid)
}

// string cid = 2;
inline void deleteQueueRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deleteQueueRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteQueueRequest.cid)
  return cid_.GetNoArena();
}
inline void deleteQueueRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteQueueRequest.cid)
}
#if LANG_CXX11
inline void deleteQueueRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteQueueRequest.cid)
}
#endif
inline void deleteQueueRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteQueueRequest.cid)
}
inline void deleteQueueRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteQueueRequest.cid)
}
inline ::std::string* deleteQueueRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteQueueRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deleteQueueRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.deleteQueueRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deleteQueueRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteQueueRequest.cid)
}

// string queue_name = 3;
inline void deleteQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deleteQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.deleteQueueRequest.queue_name)
  return queue_name_.GetNoArena();
}
inline void deleteQueueRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.deleteQueueRequest.queue_name)
}
#if LANG_CXX11
inline void deleteQueueRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.deleteQueueRequest.queue_name)
}
#endif
inline void deleteQueueRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.deleteQueueRequest.queue_name)
}
inline void deleteQueueRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.deleteQueueRequest.queue_name)
}
inline ::std::string* deleteQueueRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.deleteQueueRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deleteQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.deleteQueueRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deleteQueueRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.deleteQueueRequest.queue_name)
}

// -------------------------------------------------------------------

// queueBindRequest

// string rid = 1;
inline void queueBindRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& queueBindRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.queueBindRequest.rid)
  return rid_.GetNoArena();
}
inline void queueBindRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueBindRequest.rid)
}
#if LANG_CXX11
inline void queueBindRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueBindRequest.rid)
}
#endif
inline void queueBindRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueBindRequest.rid)
}
inline void queueBindRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueBindRequest.rid)
}
inline ::std::string* queueBindRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueBindRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* queueBindRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.queueBindRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void queueBindRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueBindRequest.rid)
}

// string cid = 2;
inline void queueBindRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& queueBindRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.queueBindRequest.cid)
  return cid_.GetNoArena();
}
inline void queueBindRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueBindRequest.cid)
}
#if LANG_CXX11
inline void queueBindRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueBindRequest.cid)
}
#endif
inline void queueBindRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueBindRequest.cid)
}
inline void queueBindRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueBindRequest.cid)
}
inline ::std::string* queueBindRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueBindRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* queueBindRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.queueBindRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void queueBindRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueBindRequest.cid)
}

// string exchange_name = 3;
inline void queueBindRequest::clear_exchange_name() {
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& queueBindRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:bitmq.queueBindRequest.exchange_name)
  return exchange_name_.GetNoArena();
}
inline void queueBindRequest::set_exchange_name(const ::std::string& value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueBindRequest.exchange_name)
}
#if LANG_CXX11
inline void queueBindRequest::set_exchange_name(::std::string&& value) {
  
  exchange_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueBindRequest.exchange_name)
}
#endif
inline void queueBindRequest::set_exchange_name(const char* value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueBindRequest.exchange_name)
}
inline void queueBindRequest::set_exchange_name(const char* value, size_t size) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueBindRequest.exchange_name)
}
inline ::std::string* queueBindRequest::mutable_exchange_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueBindRequest.exchange_name)
  return exchange_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* queueBindRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:bitmq.queueBindRequest.exchange_name)
  
  return exchange_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void queueBindRequest::set_allocated_exchange_name(::std::string* exchange_name) {
  if (exchange_name != NULL) {
    
  } else {
    
  }
  exchange_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueBindRequest.exchange_name)
}

// string queue_name = 4;
inline void queueBindRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& queueBindRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.queueBindRequest.queue_name)
  return queue_name_.GetNoArena();
}
inline void queueBindRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueBindRequest.queue_name)
}
#if LANG_CXX11
inline void queueBindRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueBindRequest.queue_name)
}
#endif
inline void queueBindRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueBindRequest.queue_name)
}
inline void queueBindRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueBindRequest.queue_name)
}
inline ::std::string* queueBindRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueBindRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* queueBindRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.queueBindRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void queueBindRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueBindRequest.queue_name)
}

// string binding_key = 5;
inline void queueBindRequest::clear_binding_key() {
  binding_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& queueBindRequest::binding_key() const {
  // @@protoc_insertion_point(field_get:bitmq.queueBindRequest.binding_key)
  return binding_key_.GetNoArena();
}
inline void queueBindRequest::set_binding_key(const ::std::string& value) {
  
  binding_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueBindRequest.binding_key)
}
#if LANG_CXX11
inline void queueBindRequest::set_binding_key(::std::string&& value) {
  
  binding_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueBindRequest.binding_key)
}
#endif
inline void queueBindRequest::set_binding_key(const char* value) {
  
  binding_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueBindRequest.binding_key)
}
inline void queueBindRequest::set_binding_key(const char* value, size_t size) {
  
  binding_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueBindRequest.binding_key)
}
inline ::std::string* queueBindRequest::mutable_binding_key() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueBindRequest.binding_key)
  return binding_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* queueBindRequest::release_binding_key() {
  // @@protoc_insertion_point(field_release:bitmq.queueBindRequest.binding_key)
  
  return binding_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void queueBindRequest::set_allocated_binding_key(::std::string* binding_key) {
  if (binding_key != NULL) {
    
  } else {
    
  }
  binding_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binding_key);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueBindRequest.binding_key)
}

// -------------------------------------------------------------------

// queueUnBindRequest

// string rid = 1;
inline void queueUnBindRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& queueUnBindRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.queueUnBindRequest.rid)
  return rid_.GetNoArena();
}
inline void queueUnBindRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueUnBindRequest.rid)
}
#if LANG_CXX11
inline void queueUnBindRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueUnBindRequest.rid)
}
#endif
inline void queueUnBindRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueUnBindRequest.rid)
}
inline void queueUnBindRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueUnBindRequest.rid)
}
inline ::std::string* queueUnBindRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueUnBindRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* queueUnBindRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.queueUnBindRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void queueUnBindRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueUnBindRequest.rid)
}

// string cid = 2;
inline void queueUnBindRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& queueUnBindRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.queueUnBindRequest.cid)
  return cid_.GetNoArena();
}
inline void queueUnBindRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueUnBindRequest.cid)
}
#if LANG_CXX11
inline void queueUnBindRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueUnBindRequest.cid)
}
#endif
inline void queueUnBindRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueUnBindRequest.cid)
}
inline void queueUnBindRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueUnBindRequest.cid)
}
inline ::std::string* queueUnBindRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueUnBindRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* queueUnBindRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.queueUnBindRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void queueUnBindRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueUnBindRequest.cid)
}

// string exchange_name = 3;
inline void queueUnBindRequest::clear_exchange_name() {
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& queueUnBindRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:bitmq.queueUnBindRequest.exchange_name)
  return exchange_name_.GetNoArena();
}
inline void queueUnBindRequest::set_exchange_name(const ::std::string& value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueUnBindRequest.exchange_name)
}
#if LANG_CXX11
inline void queueUnBindRequest::set_exchange_name(::std::string&& value) {
  
  exchange_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueUnBindRequest.exchange_name)
}
#endif
inline void queueUnBindRequest::set_exchange_name(const char* value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueUnBindRequest.exchange_name)
}
inline void queueUnBindRequest::set_exchange_name(const char* value, size_t size) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueUnBindRequest.exchange_name)
}
inline ::std::string* queueUnBindRequest::mutable_exchange_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueUnBindRequest.exchange_name)
  return exchange_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* queueUnBindRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:bitmq.queueUnBindRequest.exchange_name)
  
  return exchange_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void queueUnBindRequest::set_allocated_exchange_name(::std::string* exchange_name) {
  if (exchange_name != NULL) {
    
  } else {
    
  }
  exchange_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueUnBindRequest.exchange_name)
}

// string queue_name = 4;
inline void queueUnBindRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& queueUnBindRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.queueUnBindRequest.queue_name)
  return queue_name_.GetNoArena();
}
inline void queueUnBindRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.queueUnBindRequest.queue_name)
}
#if LANG_CXX11
inline void queueUnBindRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.queueUnBindRequest.queue_name)
}
#endif
inline void queueUnBindRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.queueUnBindRequest.queue_name)
}
inline void queueUnBindRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.queueUnBindRequest.queue_name)
}
inline ::std::string* queueUnBindRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.queueUnBindRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* queueUnBindRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.queueUnBindRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void queueUnBindRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.queueUnBindRequest.queue_name)
}

// -------------------------------------------------------------------

// basicPublishRequest

// string rid = 1;
inline void basicPublishRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicPublishRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicPublishRequest.rid)
  return rid_.GetNoArena();
}
inline void basicPublishRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicPublishRequest.rid)
}
#if LANG_CXX11
inline void basicPublishRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicPublishRequest.rid)
}
#endif
inline void basicPublishRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicPublishRequest.rid)
}
inline void basicPublishRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicPublishRequest.rid)
}
inline ::std::string* basicPublishRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicPublishRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicPublishRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.basicPublishRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicPublishRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicPublishRequest.rid)
}

// string cid = 2;
inline void basicPublishRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicPublishRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicPublishRequest.cid)
  return cid_.GetNoArena();
}
inline void basicPublishRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicPublishRequest.cid)
}
#if LANG_CXX11
inline void basicPublishRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicPublishRequest.cid)
}
#endif
inline void basicPublishRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicPublishRequest.cid)
}
inline void basicPublishRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicPublishRequest.cid)
}
inline ::std::string* basicPublishRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicPublishRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicPublishRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicPublishRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicPublishRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicPublishRequest.cid)
}

// string exchange_name = 3;
inline void basicPublishRequest::clear_exchange_name() {
  exchange_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicPublishRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:bitmq.basicPublishRequest.exchange_name)
  return exchange_name_.GetNoArena();
}
inline void basicPublishRequest::set_exchange_name(const ::std::string& value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicPublishRequest.exchange_name)
}
#if LANG_CXX11
inline void basicPublishRequest::set_exchange_name(::std::string&& value) {
  
  exchange_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicPublishRequest.exchange_name)
}
#endif
inline void basicPublishRequest::set_exchange_name(const char* value) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicPublishRequest.exchange_name)
}
inline void basicPublishRequest::set_exchange_name(const char* value, size_t size) {
  
  exchange_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicPublishRequest.exchange_name)
}
inline ::std::string* basicPublishRequest::mutable_exchange_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicPublishRequest.exchange_name)
  return exchange_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicPublishRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:bitmq.basicPublishRequest.exchange_name)
  
  return exchange_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicPublishRequest::set_allocated_exchange_name(::std::string* exchange_name) {
  if (exchange_name != NULL) {
    
  } else {
    
  }
  exchange_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicPublishRequest.exchange_name)
}

// string body = 4;
inline void basicPublishRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicPublishRequest::body() const {
  // @@protoc_insertion_point(field_get:bitmq.basicPublishRequest.body)
  return body_.GetNoArena();
}
inline void basicPublishRequest::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicPublishRequest.body)
}
#if LANG_CXX11
inline void basicPublishRequest::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicPublishRequest.body)
}
#endif
inline void basicPublishRequest::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicPublishRequest.body)
}
inline void basicPublishRequest::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicPublishRequest.body)
}
inline ::std::string* basicPublishRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicPublishRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicPublishRequest::release_body() {
  // @@protoc_insertion_point(field_release:bitmq.basicPublishRequest.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicPublishRequest::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicPublishRequest.body)
}

// .bitmq.BasicProperties properties = 5;
inline bool basicPublishRequest::has_properties() const {
  return this != internal_default_instance() && properties_ != NULL;
}
inline void basicPublishRequest::clear_properties() {
  if (GetArenaNoVirtual() == NULL && properties_ != NULL) delete properties_;
  properties_ = NULL;
}
inline const ::bitmq::BasicProperties& basicPublishRequest::properties() const {
  // @@protoc_insertion_point(field_get:bitmq.basicPublishRequest.properties)
  return properties_ != NULL ? *properties_
                         : *::bitmq::BasicProperties::internal_default_instance();
}
inline ::bitmq::BasicProperties* basicPublishRequest::mutable_properties() {
  
  if (properties_ == NULL) {
    properties_ = new ::bitmq::BasicProperties;
  }
  // @@protoc_insertion_point(field_mutable:bitmq.basicPublishRequest.properties)
  return properties_;
}
inline ::bitmq::BasicProperties* basicPublishRequest::release_properties() {
  // @@protoc_insertion_point(field_release:bitmq.basicPublishRequest.properties)
  
  ::bitmq::BasicProperties* temp = properties_;
  properties_ = NULL;
  return temp;
}
inline void basicPublishRequest::set_allocated_properties(::bitmq::BasicProperties* properties) {
  delete properties_;
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicPublishRequest.properties)
}

// -------------------------------------------------------------------

// basicAckRequest

// string rid = 1;
inline void basicAckRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicAckRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicAckRequest.rid)
  return rid_.GetNoArena();
}
inline void basicAckRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicAckRequest.rid)
}
#if LANG_CXX11
inline void basicAckRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicAckRequest.rid)
}
#endif
inline void basicAckRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicAckRequest.rid)
}
inline void basicAckRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicAckRequest.rid)
}
inline ::std::string* basicAckRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicAckRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicAckRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.basicAckRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicAckRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicAckRequest.rid)
}

// string cid = 2;
inline void basicAckRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicAckRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicAckRequest.cid)
  return cid_.GetNoArena();
}
inline void basicAckRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicAckRequest.cid)
}
#if LANG_CXX11
inline void basicAckRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicAckRequest.cid)
}
#endif
inline void basicAckRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicAckRequest.cid)
}
inline void basicAckRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicAckRequest.cid)
}
inline ::std::string* basicAckRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicAckRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicAckRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicAckRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicAckRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicAckRequest.cid)
}

// string queue_name = 3;
inline void basicAckRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicAckRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.basicAckRequest.queue_name)
  return queue_name_.GetNoArena();
}
inline void basicAckRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicAckRequest.queue_name)
}
#if LANG_CXX11
inline void basicAckRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicAckRequest.queue_name)
}
#endif
inline void basicAckRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicAckRequest.queue_name)
}
inline void basicAckRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicAckRequest.queue_name)
}
inline ::std::string* basicAckRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicAckRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicAckRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.basicAckRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicAckRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicAckRequest.queue_name)
}

// string message_id = 4;
inline void basicAckRequest::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicAckRequest::message_id() const {
  // @@protoc_insertion_point(field_get:bitmq.basicAckRequest.message_id)
  return message_id_.GetNoArena();
}
inline void basicAckRequest::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicAckRequest.message_id)
}
#if LANG_CXX11
inline void basicAckRequest::set_message_id(::std::string&& value) {
  
  message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicAckRequest.message_id)
}
#endif
inline void basicAckRequest::set_message_id(const char* value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicAckRequest.message_id)
}
inline void basicAckRequest::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicAckRequest.message_id)
}
inline ::std::string* basicAckRequest::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicAckRequest.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicAckRequest::release_message_id() {
  // @@protoc_insertion_point(field_release:bitmq.basicAckRequest.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicAckRequest::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicAckRequest.message_id)
}

// -------------------------------------------------------------------

// basicConsumeRequest

// string rid = 1;
inline void basicConsumeRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicConsumeRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeRequest.rid)
  return rid_.GetNoArena();
}
inline void basicConsumeRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeRequest.rid)
}
#if LANG_CXX11
inline void basicConsumeRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeRequest.rid)
}
#endif
inline void basicConsumeRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeRequest.rid)
}
inline void basicConsumeRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeRequest.rid)
}
inline ::std::string* basicConsumeRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicConsumeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicConsumeRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeRequest.rid)
}

// string cid = 2;
inline void basicConsumeRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicConsumeRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeRequest.cid)
  return cid_.GetNoArena();
}
inline void basicConsumeRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeRequest.cid)
}
#if LANG_CXX11
inline void basicConsumeRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeRequest.cid)
}
#endif
inline void basicConsumeRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeRequest.cid)
}
inline void basicConsumeRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeRequest.cid)
}
inline ::std::string* basicConsumeRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicConsumeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicConsumeRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeRequest.cid)
}

// string consumer_tag = 3;
inline void basicConsumeRequest::clear_consumer_tag() {
  consumer_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicConsumeRequest::consumer_tag() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeRequest.consumer_tag)
  return consumer_tag_.GetNoArena();
}
inline void basicConsumeRequest::set_consumer_tag(const ::std::string& value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeRequest.consumer_tag)
}
#if LANG_CXX11
inline void basicConsumeRequest::set_consumer_tag(::std::string&& value) {
  
  consumer_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeRequest.consumer_tag)
}
#endif
inline void basicConsumeRequest::set_consumer_tag(const char* value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeRequest.consumer_tag)
}
inline void basicConsumeRequest::set_consumer_tag(const char* value, size_t size) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeRequest.consumer_tag)
}
inline ::std::string* basicConsumeRequest::mutable_consumer_tag() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeRequest.consumer_tag)
  return consumer_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicConsumeRequest::release_consumer_tag() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeRequest.consumer_tag)
  
  return consumer_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicConsumeRequest::set_allocated_consumer_tag(::std::string* consumer_tag) {
  if (consumer_tag != NULL) {
    
  } else {
    
  }
  consumer_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_tag);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeRequest.consumer_tag)
}

// string queue_name = 4;
inline void basicConsumeRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicConsumeRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeRequest.queue_name)
  return queue_name_.GetNoArena();
}
inline void basicConsumeRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeRequest.queue_name)
}
#if LANG_CXX11
inline void basicConsumeRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeRequest.queue_name)
}
#endif
inline void basicConsumeRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeRequest.queue_name)
}
inline void basicConsumeRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeRequest.queue_name)
}
inline ::std::string* basicConsumeRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicConsumeRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicConsumeRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeRequest.queue_name)
}

// bool auto_ack = 5;
inline void basicConsumeRequest::clear_auto_ack() {
  auto_ack_ = false;
}
inline bool basicConsumeRequest::auto_ack() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeRequest.auto_ack)
  return auto_ack_;
}
inline void basicConsumeRequest::set_auto_ack(bool value) {
  
  auto_ack_ = value;
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeRequest.auto_ack)
}

// -------------------------------------------------------------------

// basicCancelRequest

// string rid = 1;
inline void basicCancelRequest::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicCancelRequest::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCancelRequest.rid)
  return rid_.GetNoArena();
}
inline void basicCancelRequest::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCancelRequest.rid)
}
#if LANG_CXX11
inline void basicCancelRequest::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCancelRequest.rid)
}
#endif
inline void basicCancelRequest::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCancelRequest.rid)
}
inline void basicCancelRequest::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCancelRequest.rid)
}
inline ::std::string* basicCancelRequest::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCancelRequest.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicCancelRequest::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.basicCancelRequest.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicCancelRequest::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCancelRequest.rid)
}

// string cid = 2;
inline void basicCancelRequest::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicCancelRequest::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCancelRequest.cid)
  return cid_.GetNoArena();
}
inline void basicCancelRequest::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCancelRequest.cid)
}
#if LANG_CXX11
inline void basicCancelRequest::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCancelRequest.cid)
}
#endif
inline void basicCancelRequest::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCancelRequest.cid)
}
inline void basicCancelRequest::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCancelRequest.cid)
}
inline ::std::string* basicCancelRequest::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCancelRequest.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicCancelRequest::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicCancelRequest.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicCancelRequest::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCancelRequest.cid)
}

// string consumer_tag = 3;
inline void basicCancelRequest::clear_consumer_tag() {
  consumer_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicCancelRequest::consumer_tag() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCancelRequest.consumer_tag)
  return consumer_tag_.GetNoArena();
}
inline void basicCancelRequest::set_consumer_tag(const ::std::string& value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCancelRequest.consumer_tag)
}
#if LANG_CXX11
inline void basicCancelRequest::set_consumer_tag(::std::string&& value) {
  
  consumer_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCancelRequest.consumer_tag)
}
#endif
inline void basicCancelRequest::set_consumer_tag(const char* value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCancelRequest.consumer_tag)
}
inline void basicCancelRequest::set_consumer_tag(const char* value, size_t size) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCancelRequest.consumer_tag)
}
inline ::std::string* basicCancelRequest::mutable_consumer_tag() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCancelRequest.consumer_tag)
  return consumer_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicCancelRequest::release_consumer_tag() {
  // @@protoc_insertion_point(field_release:bitmq.basicCancelRequest.consumer_tag)
  
  return consumer_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicCancelRequest::set_allocated_consumer_tag(::std::string* consumer_tag) {
  if (consumer_tag != NULL) {
    
  } else {
    
  }
  consumer_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_tag);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCancelRequest.consumer_tag)
}

// string queue_name = 4;
inline void basicCancelRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicCancelRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCancelRequest.queue_name)
  return queue_name_.GetNoArena();
}
inline void basicCancelRequest::set_queue_name(const ::std::string& value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCancelRequest.queue_name)
}
#if LANG_CXX11
inline void basicCancelRequest::set_queue_name(::std::string&& value) {
  
  queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCancelRequest.queue_name)
}
#endif
inline void basicCancelRequest::set_queue_name(const char* value) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCancelRequest.queue_name)
}
inline void basicCancelRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCancelRequest.queue_name)
}
inline ::std::string* basicCancelRequest::mutable_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCancelRequest.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicCancelRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:bitmq.basicCancelRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicCancelRequest::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCancelRequest.queue_name)
}

// -------------------------------------------------------------------

// basicConsumeResponse

// string cid = 1;
inline void basicConsumeResponse::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicConsumeResponse::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeResponse.cid)
  return cid_.GetNoArena();
}
inline void basicConsumeResponse::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeResponse.cid)
}
#if LANG_CXX11
inline void basicConsumeResponse::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeResponse.cid)
}
#endif
inline void basicConsumeResponse::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeResponse.cid)
}
inline void basicConsumeResponse::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeResponse.cid)
}
inline ::std::string* basicConsumeResponse::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeResponse.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicConsumeResponse::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeResponse.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicConsumeResponse::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeResponse.cid)
}

// string consumer_tag = 2;
inline void basicConsumeResponse::clear_consumer_tag() {
  consumer_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicConsumeResponse::consumer_tag() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeResponse.consumer_tag)
  return consumer_tag_.GetNoArena();
}
inline void basicConsumeResponse::set_consumer_tag(const ::std::string& value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeResponse.consumer_tag)
}
#if LANG_CXX11
inline void basicConsumeResponse::set_consumer_tag(::std::string&& value) {
  
  consumer_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeResponse.consumer_tag)
}
#endif
inline void basicConsumeResponse::set_consumer_tag(const char* value) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeResponse.consumer_tag)
}
inline void basicConsumeResponse::set_consumer_tag(const char* value, size_t size) {
  
  consumer_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeResponse.consumer_tag)
}
inline ::std::string* basicConsumeResponse::mutable_consumer_tag() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeResponse.consumer_tag)
  return consumer_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicConsumeResponse::release_consumer_tag() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeResponse.consumer_tag)
  
  return consumer_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicConsumeResponse::set_allocated_consumer_tag(::std::string* consumer_tag) {
  if (consumer_tag != NULL) {
    
  } else {
    
  }
  consumer_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_tag);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeResponse.consumer_tag)
}

// string body = 3;
inline void basicConsumeResponse::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicConsumeResponse::body() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeResponse.body)
  return body_.GetNoArena();
}
inline void basicConsumeResponse::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicConsumeResponse.body)
}
#if LANG_CXX11
inline void basicConsumeResponse::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicConsumeResponse.body)
}
#endif
inline void basicConsumeResponse::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicConsumeResponse.body)
}
inline void basicConsumeResponse::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicConsumeResponse.body)
}
inline ::std::string* basicConsumeResponse::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeResponse.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicConsumeResponse::release_body() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeResponse.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicConsumeResponse::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeResponse.body)
}

// .bitmq.BasicProperties properties = 4;
inline bool basicConsumeResponse::has_properties() const {
  return this != internal_default_instance() && properties_ != NULL;
}
inline void basicConsumeResponse::clear_properties() {
  if (GetArenaNoVirtual() == NULL && properties_ != NULL) delete properties_;
  properties_ = NULL;
}
inline const ::bitmq::BasicProperties& basicConsumeResponse::properties() const {
  // @@protoc_insertion_point(field_get:bitmq.basicConsumeResponse.properties)
  return properties_ != NULL ? *properties_
                         : *::bitmq::BasicProperties::internal_default_instance();
}
inline ::bitmq::BasicProperties* basicConsumeResponse::mutable_properties() {
  
  if (properties_ == NULL) {
    properties_ = new ::bitmq::BasicProperties;
  }
  // @@protoc_insertion_point(field_mutable:bitmq.basicConsumeResponse.properties)
  return properties_;
}
inline ::bitmq::BasicProperties* basicConsumeResponse::release_properties() {
  // @@protoc_insertion_point(field_release:bitmq.basicConsumeResponse.properties)
  
  ::bitmq::BasicProperties* temp = properties_;
  properties_ = NULL;
  return temp;
}
inline void basicConsumeResponse::set_allocated_properties(::bitmq::BasicProperties* properties) {
  delete properties_;
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicConsumeResponse.properties)
}

// -------------------------------------------------------------------

// basicCommonResponse

// string rid = 1;
inline void basicCommonResponse::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicCommonResponse::rid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCommonResponse.rid)
  return rid_.GetNoArena();
}
inline void basicCommonResponse::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCommonResponse.rid)
}
#if LANG_CXX11
inline void basicCommonResponse::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCommonResponse.rid)
}
#endif
inline void basicCommonResponse::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCommonResponse.rid)
}
inline void basicCommonResponse::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCommonResponse.rid)
}
inline ::std::string* basicCommonResponse::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCommonResponse.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicCommonResponse::release_rid() {
  // @@protoc_insertion_point(field_release:bitmq.basicCommonResponse.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicCommonResponse::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCommonResponse.rid)
}

// string cid = 2;
inline void basicCommonResponse::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& basicCommonResponse::cid() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCommonResponse.cid)
  return cid_.GetNoArena();
}
inline void basicCommonResponse::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitmq.basicCommonResponse.cid)
}
#if LANG_CXX11
inline void basicCommonResponse::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bitmq.basicCommonResponse.cid)
}
#endif
inline void basicCommonResponse::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitmq.basicCommonResponse.cid)
}
inline void basicCommonResponse::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitmq.basicCommonResponse.cid)
}
inline ::std::string* basicCommonResponse::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:bitmq.basicCommonResponse.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* basicCommonResponse::release_cid() {
  // @@protoc_insertion_point(field_release:bitmq.basicCommonResponse.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void basicCommonResponse::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:bitmq.basicCommonResponse.cid)
}

// bool ok = 3;
inline void basicCommonResponse::clear_ok() {
  ok_ = false;
}
inline bool basicCommonResponse::ok() const {
  // @@protoc_insertion_point(field_get:bitmq.basicCommonResponse.ok)
  return ok_;
}
inline void basicCommonResponse::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:bitmq.basicCommonResponse.ok)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace bitmq

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mq_5fproto_2eproto__INCLUDED
